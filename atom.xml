<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Allen Sun&#39;Blog</title>
  
  <subtitle>仍是少年</subtitle>
  <link href="http://sun-hailong.github.io/atom.xml" rel="self"/>
  
  <link href="http://sun-hailong.github.io/"/>
  <updated>2022-03-24T08:35:33.880Z</updated>
  <id>http://sun-hailong.github.io/</id>
  
  <author>
    <name>Allen Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Alibaba大数据文件处理笔试题</title>
    <link href="http://sun-hailong.github.io/2022/03/24/a-li-da-shu-ju-wen-jian-chu-li-bi-shi/"/>
    <id>http://sun-hailong.github.io/2022/03/24/a-li-da-shu-ju-wen-jian-chu-li-bi-shi/</id>
    <published>2022-03-24T08:30:40.012Z</published>
    <updated>2022-03-24T08:35:33.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><h2 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h2><p>题目：有10个文件，每个文件有1000万行，文件内容的每一行为一个自然数；需要，写一个程序，将所有数字排序，分为10个文件输出，如0号文件包含前1000万个数字，1号文件文件包含第1千万-2千万之间的数字，依次类推。</p><p>限制：如果使用<code>java</code>，<code>-Xmx</code>需要设置为<code>32MB</code>；其它语言也需限制内存为<code>32MB</code>或说明在内存使用上如何达到限制的。</p><p>要求：正确输出 使用多线程加分</p><h2 id="2、问题分析"><a href="#2、问题分析" class="headerlink" title="2、问题分析"></a>2、问题分析</h2><p>计算机内存是有限的，当数据无法完全存入内存时，则无法使用正常的排序算法一次完成排序，而必须利用磁盘空间的辅助进行外部排序，即利用有限的内存每次读入部分数据排序后得到一个顺串后暂时放到磁盘，最后将多个顺串进行归并直到最终完成排序，因为在归并过程中，只需从每个顺串中取出最小的一个数据进行比较即可，而不需要整个顺串都在内存中，所以解决了内存空间不足的问题。那么，原问题就可以分解成两个子问题，一个是如何生成顺串，另一个是如何将顺串进行归并。</p><h2 id="3、算法思路"><a href="#3、算法思路" class="headerlink" title="3、算法思路"></a>3、算法思路</h2><ul><li><p>外部排序</p><p>先将10个大文件分成若干个有序的小文件。</p><p>假设每个自然数的类型是<code>unsigned long long</code>，则一个自然数需要<code>8Byte</code>的空间。一个大文件中1000万个自然数需要<code>76.29MB</code>的空间存储，而内存只有<code>32MB</code>，所以采用快速排序，将一个大文件分成5个小文件，每个文件200万的自然数，快速排序所需的辅助空间为O(n)，所以在满足内存的情况下能得到5个有序的小文件。最终能得到50个有序的小文件，每个小文件200万个自然数。</p></li><li><p>多路归并</p><p>从外部排序得到的50个有序的小文件中，每次读取每个文件中最小的数放入内存，找出50个数中的最小数，然后输出到对应目标文件，再从此最小数的源文件中继续读一个数进来，直至所有的数均输出完毕。</p></li><li><p>时间复杂度</p><p>$O(nlogn)$</p></li></ul><p>生成数据所用时间：</p><img src="https://gitee.com/hailong-sun/pictures/raw/master/iCloud/image-20220324154730337.png" alt="生成数据的时间" style="zoom: 50%;"><img src="https://gitee.com/hailong-sun/pictures/raw/master/iCloud/image-20220324154837258.png" alt="数据" style="zoom:50%;"><h2 id="4、数据说明"><a href="#4、数据说明" class="headerlink" title="4、数据说明"></a>4、数据说明</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token number">1e7</span><span class="token punctuation">;</span><span class="token comment">//每个大文件包含无序的1kw个数</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e6</span><span class="token punctuation">;</span><span class="token comment">//每个小文件包含有序的200w个数</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> nums<span class="token punctuation">;</span><span class="token comment">//用于存放读入的自然数</span><span class="token keyword">int</span> deviation<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录每个小文件已被读取的数量</span><span class="token keyword">void</span> <span class="token function">extern_sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//外部排序，分解大文件成有序小文件</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//归并排序</span>data<span class="token punctuation">.</span>txt <span class="token comment">//10个生成的大文件</span>small<span class="token punctuation">.</span>txt<span class="token comment">//50个生成的小文件</span>out<span class="token punctuation">.</span>txt<span class="token comment">//输出的答案</span></code></pre><h2 id="5、样例分析"><a href="#5、样例分析" class="headerlink" title="5、样例分析"></a>5、样例分析</h2><p>生成2个文件，每个文件为10行自然数：</p><img src="https://gitee.com/hailong-sun/pictures/raw/master/iCloud/image-20220324160152145.png" alt="生成的数据" style="zoom:50%;"><p>经过外部排序，将其分解为4个小文件，每个文件为5行有序的自然数：</p><img src="https://gitee.com/hailong-sun/pictures/raw/master/iCloud/image-20220324160415004.png" alt="小文件" style="zoom:50%;"><p>进行归并排序后得到最终答案：</p><img src="https://gitee.com/hailong-sun/pictures/raw/master/iCloud/image-20220324160616149.png" alt="答案" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实现思路&quot;&gt;&lt;a href=&quot;#实现思路&quot; class=&quot;headerlink&quot; title=&quot;实现思路&quot;&gt;&lt;/a&gt;实现思路&lt;/h1&gt;&lt;h2 id=&quot;1、问题描述&quot;&gt;&lt;a href=&quot;#1、问题描述&quot; class=&quot;headerlink&quot; title=&quot;1、问题描</summary>
      
    
    
    
    <category term="笔试题" scheme="http://sun-hailong.github.io/categories/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="阿里巴巴" scheme="http://sun-hailong.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4/"/>
    
  </entry>
  
  <entry>
    <title>操作系统面试题</title>
    <link href="http://sun-hailong.github.io/2022/03/06/cao-zuo-xi-tong-mian-shi-ti/"/>
    <id>http://sun-hailong.github.io/2022/03/06/cao-zuo-xi-tong-mian-shi-ti/</id>
    <published>2022-03-06T09:19:08.859Z</published>
    <updated>2022-03-08T07:25:28.026Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-10"><a href="#1-10" class="headerlink" title="1~10"></a>1~10</h3><h4 id="1-什么是用户态和内核态"><a href="#1-什么是用户态和内核态" class="headerlink" title="1. 什么是用户态和内核态"></a>1. 什么是用户态和内核态</h4><p>用户态和内核态是操作系统的两种运行状态。</p><ul><li><p><strong>内核态</strong>：可以访问任意的数据，包括外围设备，比如网卡、硬盘等，处于内核态的 CPU 可以从一个程序切换到另外一个程序，并且占用 CPU 不会发生抢占情况，一般处于特权级 0 的状态我们称之为内核态。</p></li><li><p><strong>用户态</strong>：用户态运行的进程可以直接读取用户程序的数据。</p></li></ul><h4 id="2-如何从用户态切换到内核态呢"><a href="#2-如何从用户态切换到内核态呢" class="headerlink" title="2. 如何从用户态切换到内核态呢"></a>2. 如何从用户态切换到内核态呢</h4><ul><li><p>系统调用</p><p>这是用户态进程主动要求切换到内核态的一种方式，用户态进程通过系统调用申请使用操作系统提供的服务程序完成工作，比如 <code>read </code>操作，比如前例中<code>fork()</code>实际上就是执行了一个创建新进程的系统调用。而系统调用的机制其核心还是使用了操作系统为用户特别开放的一个中断来实现，例如Linux的<code>int 80h</code>中断。</p></li><li><p>异常</p><p>当CPU在执行运行在用户态下的程序时，发生了某些事先不可知的异常，这时会触发由当前运行进程切换到处理此异常的内核相关程序中，也就转到了内核态，比如缺页异常。</p></li><li><p>外围设备的中断</p><p>当外围设备完成用户请求的操作后，会向CPU发出相应的中断信号，这时CPU会暂停执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到内核态的切换。比如硬盘读写操作完成，系统会切换到硬盘读写的中断处理程序中执行后续操作等。</p></li></ul><h4 id="3-并行与并发"><a href="#3-并行与并发" class="headerlink" title="3. 并行与并发"></a>3. 并行与并发</h4><ul><li>并发：在操作系统中，某一时间段，几个程序在同一个CPU上运行，但在任意一个时间点上，只有一个程序在CPU上运行。(一起出发)</li><li>并行：两个程序在某一时刻同时运行，强调同时。（一起执行）</li></ul><h4 id="4-同步与异步"><a href="#4-同步与异步" class="headerlink" title="4. 同步与异步"></a>4. 同步与异步</h4><ul><li>同步：指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，知道收到返回信息才继续执行下去；</li><li>异步：进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回式系统会通知进程进行处理，这样可以提高执行的效率</li></ul><h4 id="5-线程、进程、协程的区别"><a href="#5-线程、进程、协程的区别" class="headerlink" title="5. 线程、进程、协程的区别"></a>5. 线程、进程、协程的区别</h4><ul><li><p>进程是资源分配的基本单位，运行一个程序会创建一个或多个进程，进程就是运行起来的可执行程序。 </p></li><li><p>线程是独立调度的基本单位，是轻量级的进程，每个进程里都有一个主线程，且只能有一个，和进程是相互依存的关系，生命周期和进程一样。 </p></li><li><p>协程是用户态的轻量级线程，是线程内部的基本单位。无需线程上下文切换的开销、无需原子操作锁定及同步的开销、方便切换控制流，简化编程模型。</p></li></ul><h4 id="6-进程和线程的区别"><a href="#6-进程和线程的区别" class="headerlink" title="6. 进程和线程的区别"></a>6. 进程和线程的区别</h4><ul><li><p>首先从资源来说，<strong>进程是资源分配的基本单位</strong>，但是线程不拥有资源，线程可以访问隶属进程的资源。 </p></li><li><p>然后从调度来说，<strong>线程是独立调度的基本单位</strong>，在同一进程中线程切换的话不会引起进程的切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程的切换。 </p></li><li><p>从系统开销来讲，由于创建或撤销进程，系统都要分配回收资源，所付出的开销远大于创建或撤销线程时的开销。类似的，在进行进程切换的时候，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境设置，而线程切换只需保存和设置少量寄存器的内容，开销很小。 </p></li><li><p>通信方面来说，线程间可以通过直接读写同一进程的数据进行通信，但是进程通信需要借助一些复杂的方法。</p></li></ul><h4 id="7-PCB-Process-Control-Block-是什么"><a href="#7-PCB-Process-Control-Block-是什么" class="headerlink" title="7. PCB(Process Control Block)是什么"></a>7. PCB(Process Control Block)是什么</h4><p>PCB主要包含下面几部分的内容：  </p><ul><li>进程的描述信息，比如进程的名称，标识符， </li><li>处理机的状态信息，当程序中断是保留此时的信息，以便 CPU 返回时能从断点执行 </li><li>进程调度信息，比如阻塞原因，状态，优先级等等 </li><li>进程控制和资源占用，同步通信机制，链接指针（指向队列中下一个进程的 PCB 地址）</li></ul><p>PCB 的作用  </p><ul><li>PCB是进程实体的一部分，是操作系统中最重要的数据结构 </li><li>由于它的存在，使得多道程序环境下，不能独立运行的程序成为一个能独立运行的基本单位，使得程序可以并发执行 </li><li>系统通过 PCB 来感知进程的存在。（换句话说，PCB 是进程存在的唯一标识） </li><li>PCB 是进程唯一标识符。</li></ul><h4 id="8-进程的五种状态"><a href="#8-进程的五种状态" class="headerlink" title="8. 进程的五种状态"></a>8. 进程的五种状态</h4><p>有创建状态、就绪状态、运行状态、阻塞状态、结束状态</p><ul><li><p>其中只有就绪状态和运行状态能互相转化，当进程为就绪态时，等待 CPU 分配时间片，得到时间片后就进入运行状态 </p></li><li><p>运行状态在使用完 CPU 时间片后，又重回就绪态。 </p></li><li><p>阻塞状态是进程在运行状态时，需要等待某个资源比如打印机资源，而进入一个挂起的状态，等资源拿到后会回到就绪状态，等待 CPU 时间片。</p></li></ul><p><img src="https://gitee.com/hailong-sun/pictures/raw/master/iCloud/image-20220306214902484.png" alt="进程的五种状态及转换"></p><h4 id="9-进程调度算法（面试高频考点）"><a href="#9-进程调度算法（面试高频考点）" class="headerlink" title="9. 进程调度算法（面试高频考点）"></a>9. 进程调度算法（面试高频考点）</h4><p>这个看cyc大佬总结的，按批处理系统和交互式系统去记忆比较容易记住。点这里：<a href="www.cyc2018.xyz/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20-%20%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86.html#%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95">cycBook</a></p><h4 id="10-进程同步的方式"><a href="#10-进程同步的方式" class="headerlink" title="10. 进程同步的方式"></a>10. 进程同步的方式</h4><ol><li><p>临界区<br>首先对临界资源的访问那段代码被称为临界区，为了互斥的访问临界区，每个进程在进入临界区时，都需要先进行检查，也就是查看锁。</p></li><li><p>同步与互斥</p><p>为协调共同对一个共享资源的单独访问而设计的</p><p>同步：多个进程因为合作产生的直接制约关系，使得进程有一定的先后顺序。<br>互斥：多个进程在同一时刻只有一个进程能进入临界区。</p></li><li><p>信号量<br>信号量是一个整型变量，可以对其执行 P 和 V 操作。<br>P：如果信号量大于零，就对其进行减 1 操作；如果信号量等于 0，进程进入 waiting 状态，等待信号量大于零。<br>V：对信号量执行加 1 操作，并唤醒正在 waiting 的进程<br>如果信号量只能取 0 或者 1，那么就变成了互斥量，其实也可以理解成加锁解锁操作，0 表示已经加锁，1 表示解锁。</p></li><li><p>事件</p><p>用来通知线程有一些事件已发生，从而启动后继任务的开始。</p><p>优点：事件对象通过通知操作的方式来保持线程的同步，并且可以实现不同进程中的线程同步操作。</p></li></ol><h4 id="11-进程间通信的方式"><a href="#11-进程间通信的方式" class="headerlink" title="11. 进程间通信的方式"></a>11. 进程间通信的方式</h4><p>进程通信和进程同步很容易混淆，其实可以把进程通信当成一种手段，进程同步是一种目的，为了实现进程同步，可传输一些进程同步所需要的信息。</p><ul><li>管道<ul><li>匿名管道：举个例子：<code>linux </code>里的竖线，就是管道的意思，比如 <code>ps -aux|grep mysql</code> 这句话的意思是把前一个进程查询的结果作为<code>grep mysql</code>的输入，如果两个进程要进行通信的话，就可以用这种管道来进行通信。<br>这种通信的方式是半双工通信的，只能单向交替传输<br>并且只能在具有亲属关系的进程之间通信使用。<br>可以看成是一种特殊的文件，但是这种文件只能存在于内存之中。 </li><li>命名管道：可以用 <code>mkfifo </code>命令创建一个命名管道，可以用一个进程向管道里写数据，然后可以让另一个进程把里面的数据读出来。命名管道的优点是去除了只能在父子进程中使用的限制，并且命名管道有路径名和它相关联，是以一种特殊设备文件形式存在于文件系统中的。</li></ul></li><li>消息队列<ul><li>消息队列的通信模式是这样的：a 进程要给 b 进程发消息，只需要把消息挂在消息队列（可以是中介邮局，也可以是进程自己的信箱）里就行了，b 进程需要的时候再去取消息队列里的消息。 </li><li>消息队列可以独立于读写进程存在，就算进程终止时，消息队列的内容也不会被删除。 </li><li>读进程可以根据消息类型有选择的接收消息，而不像 FIFO 那样只能默认接收。</li></ul></li><li>共享内存<ul><li>共享内存的方式就可以解决拷贝耗时很长的问题了。 </li><li>共享内存是最快的一种进程通信的方式，因为进程是直接对内存进行存取的。因为可以多个进程对共享内存同时操作，所以对共享空间的访问必须要求进程对共享内存的访问是互斥的。所以我们经常把信号量和共享内存一起使用来实现进程通信。 </li><li>（这里补个知识！！！系统加载一个进程的时候，分配给进程的内存并不是实际的物理内存，而是虚拟内存空间。那么我们可以让两个进程各自拿出一块儿虚拟地址空间来，映射到同一个物理内存中。这样两个进程虽然有独立的虚拟内存空间，但有一部分是映射到相同的物理内存，这样就完成共享机制了。）</li></ul></li><li>信号量<ul><li>共享内存最大的问题就是多进程竞争内存的问题，就像平时所说的线程安全的问题，那么就需要靠信号量来保证进程间的操作的同步与互斥。 </li><li>信号量其实就是个计数器，例如信号量的初始值是 1，然后 a 进程访问临界资源的时候，把信号量设置为 0，然后进程 b 也要访问临界资源的时候，发现信号量是 0，就知道已有进程在访问临界资源了，这时进程 b 就访问不了了，所以说信号量也是进程间的一种通信方式。</li></ul></li></ul><h4 id="12-什么是僵尸进程"><a href="#12-什么是僵尸进程" class="headerlink" title="12. 什么是僵尸进程"></a>12. 什么是僵尸进程</h4><p>僵尸进程是已完成且处于终止状态，但在进程表中却仍然存在的进程。僵尸进程通常发生在父子关系的进程中，由于父进程仍需要读取其子进程的退出状态所造成的。</p><h4 id="13-死锁产生的原因"><a href="#13-死锁产生的原因" class="headerlink" title="13. 死锁产生的原因"></a>13. 死锁产生的原因</h4><p>死锁产生的原因大致有两个：资源竞争和程序执行顺序不当</p><h4 id="14-死锁产生的必要条件"><a href="#14-死锁产生的必要条件" class="headerlink" title="14. 死锁产生的必要条件"></a>14. 死锁产生的必要条件</h4><ul><li>互斥条件：每个资源都被分配给了一个进程或者资源是可用的</li><li>保持和等待条件：已经获取资源的进程被认为能够获取新的资源</li><li>不可抢占条件：分配给一个进程的资源不能强制的从其他进程抢占资源，它只能由占有它的进程显示释放</li><li>循环等待：死锁发生时，系统中一定有两个或者两个以上的进程组成一个循环，循环中的每个进程都在等待下一个进程释放的资源。</li></ul><h4 id="15-死锁的恢复方式"><a href="#15-死锁的恢复方式" class="headerlink" title="15. 死锁的恢复方式"></a>15. 死锁的恢复方式</h4><p><strong>通过抢占进行恢复</strong></p><p>在某些情况下，可能会临时将某个资源从它的持有者转移到另一个进程。比如在不通知原进程的情况下，将某个资源从进程中强制取走给其他进程使用，使用完后又送回。这种恢复方式一般比较困难而且有些简单粗暴，并不可取。</p><p><strong>通过回滚进行恢复</strong></p><p>如果系统设计者和机器操作员知道有可能发生死锁，那么就可以定期检查流程。进程的检测点意味着进程的状态可以被写入到文件以便后面进行恢复。检测点不仅包含<code>存储映像(memory image)</code>，还包含<code>资源状态(resource state)</code>。一种更有效的解决方式是不要覆盖原有的检测点，而是每出现一个检测点都要把它写入到文件中，这样当进程执行时，就会有一系列的检查点文件被累积起来。</p><p>为了进行恢复，要从上一个较早的检查点上开始，这样所需要资源的进程会回滚到上一个时间点，在这个时间点上，死锁进程还没有获取所需要的资源，可以在此时对其进行资源分配。</p><p><strong>杀死进程恢复</strong></p><p>最简单有效的解决方案是直接杀死一个死锁进程。但是杀死一个进程可能照样行不通，这时候就需要杀死别的资源进行恢复。</p><p>另外一种方式是选择一个环外的进程作为牺牲品来释放进程资源。</p><h4 id="16-如何破坏死锁"><a href="#16-如何破坏死锁" class="headerlink" title="16. 如何破坏死锁"></a>16. 如何破坏死锁</h4><p>和死锁产生的必要条件一样，如果要破坏死锁，也是从下面四种方式进行破坏。</p><p><strong>破坏互斥条件</strong></p><p>如果资源不被一个进程独占，那么死锁肯定不会产生。如果两个打印机同时使用一个资源会造成混乱，打印机的解决方式是使用 <code>假脱机打印机(spooling printer)</code> ，这项技术可以允许多个进程同时产生输出，在这种模型中，实际请求打印机的唯一进程是打印机守护进程，也称为后台进程。后台进程不会请求其他资源。我们可以消除打印机的死锁。</p><p>后台进程通常被编写为能够输出完整的文件后才能打印，假如两个进程都占用了假脱机空间的一半，而这两个进程都没有完成全部的输出，就会导致死锁。</p><p>因此，尽量做到尽可能少的进程可以请求资源。</p><p><strong>破坏保持等待的条件</strong></p><p>第二种方式是如果我们能阻止持有资源的进程请求其他资源，我们就能够消除死锁。一种实现方式是让所有的进程开始执行前请求全部的资源。如果所需的资源可用，进程会完成资源的分配并运行到结束。如果有任何一个资源处于频繁分配的情况，那么没有分配到资源的进程就会等待。</p><p>很多进程<strong>无法在执行完成前就知道到底需要多少资源</strong>，如果知道的话，就可以使用银行家算法；还有一个问题是这样<strong>无法合理有效利用资源</strong>。</p><p>还有一种方式是进程在请求其他资源时，先释放所占用的资源，然后再尝试一次获取全部的资源。</p><p><strong>破坏不可抢占条件</strong></p><p>破坏不可抢占条件也是可以的。可以通过<strong>虚拟化</strong>的方式来避免这种情况。</p><p><strong>破坏循环等待条件</strong></p><p>现在就剩最后一个条件了，循环等待条件可以通过多种方法来破坏。一种方式是制定一个标准，一个进程在任何时候只能使用一种资源。如果需要另外一种资源，必须释放当前资源。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-10&quot;&gt;&lt;a href=&quot;#1-10&quot; class=&quot;headerlink&quot; title=&quot;1~10&quot;&gt;&lt;/a&gt;1~10&lt;/h3&gt;&lt;h4 id=&quot;1-什么是用户态和内核态&quot;&gt;&lt;a href=&quot;#1-什么是用户态和内核态&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="八股文" scheme="http://sun-hailong.github.io/categories/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    
    <category term="操作系统" scheme="http://sun-hailong.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>C++面试题</title>
    <link href="http://sun-hailong.github.io/2022/03/06/c-mian-shi-ti/"/>
    <id>http://sun-hailong.github.io/2022/03/06/c-mian-shi-ti/</id>
    <published>2022-03-06T07:05:58.805Z</published>
    <updated>2022-03-08T02:03:55.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-10"><a href="#1-10" class="headerlink" title="1~10"></a>1~10</h2><h3 id="1-变量的声明和定义有什么区别"><a href="#1-变量的声明和定义有什么区别" class="headerlink" title="1. 变量的声明和定义有什么区别"></a>1. 变量的声明和定义有什么区别</h3><p>变量的定义为变量分配地址和存储空间， 变量的声明不分配地址。一个变量可以在多个地方声明， 但是只在一个地方定义。 加入extern修饰的是变量的声明， 说明此变量将在文件以外或在文件后面部分定义。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">extern</span> <span class="token keyword">int</span> A<span class="token punctuation">;</span>    <span class="token comment">//这是个声明而不是定义，声明A是一个已经定义了的外部变量</span>    <span class="token comment">//注意：声明外部变量时可以把变量类型去掉如：extern A;</span>    <span class="token function">do_sth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行函数</span><span class="token punctuation">}</span><span class="token keyword">int</span> A<span class="token punctuation">;</span> <span class="token comment">//是定义，定义了A为整型的外部变量</span></code></pre><h3 id="2-简述-ifdef、-else、-endif和-ifndef的作用"><a href="#2-简述-ifdef、-else、-endif和-ifndef的作用" class="headerlink" title="2. 简述#ifdef、#else、#endif和#ifndef的作用"></a>2. 简述#ifdef、#else、#endif和#ifndef的作用</h3><ul><li>利用<code>#ifdef</code>、<code>#endif</code>将某程序功能模块包括进去，以向特定用户提供该功能。在不需要时用户可轻易将其屏蔽。</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">MATH</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"math.c"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></code></pre><ul><li>在子程序前加上标记，以便于追踪和调试。</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span><span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"In debugging......!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></code></pre><ul><li>应对硬件的限制。由于一些具体应用环境的硬件不一样，限于条件，本地缺乏这种设备，只能绕过硬件，直接写出预期结果。</li></ul><p>注意： 虽然不用条件编译命令而直接用if语句也能达到要求，但那样做目标程序长（ 因为所有语句都编译），运行时间长（ 因为在程序运行时间对if语句进行测试）。而采用条件编译，可以减少被编译的语句，从而减少目标程序的长度， 减少运行时间。</p><h3 id="3-结构体可以直接赋值吗"><a href="#3-结构体可以直接赋值吗" class="headerlink" title="3. 结构体可以直接赋值吗"></a>3. 结构体可以直接赋值吗</h3><p>声明时可以直接初始化， 同一结构体的不同对象之间也可以直接赋值， 但是当结构体中含有指针“ 成员” 时一定要小心。</p><p>注意：当有多个指针指向同一段内存时， 某个指针释放这段内存可能会导致其他指针的非法操作。因此在释放前一定要确保其他指针不再使用这段内存空间。</p><h3 id="4-sizeof和strlen的区别"><a href="#4-sizeof和strlen的区别" class="headerlink" title="4. sizeof和strlen的区别"></a>4. sizeof和strlen的区别</h3><ul><li><code>sizeof</code>是一个操作符，<code>strlen</code>是库函数。</li><li><code>sizeof</code>的参数可以是数据的类型，也可以是变量，而<code>strlen</code>只能以结尾为<code>'\0'</code>的字符串作参数。</li><li>编译器在编译时就计算出了<code>sizeof</code>的结果，而<code>strlen</code>函数必须在运行时才能计算出来。并且<code>sizeof</code>计算的是数据类型占内存的大小，而<code>strlen</code>计算的是字符串实际的长度。</li><li>数组做<code>sizeof</code>的参数不退化，传递给<code>strlen</code>就退化为指针了</li></ul><h3 id="5-new-delete、malloc-free"><a href="#5-new-delete、malloc-free" class="headerlink" title="5. new/delete、malloc/free"></a>5. new/delete、malloc/free</h3><h4 id="5-1-new-delete、malloc-free-区别"><a href="#5-1-new-delete、malloc-free-区别" class="headerlink" title="5.1 new/delete、malloc/free 区别"></a>5.1 new/delete、malloc/free 区别</h4><table><thead><tr><th align="center">特征</th><th align="center">new/delete</th><th align="center">malloc/free</th></tr></thead><tbody><tr><td align="center">分配内存的位置</td><td align="center">自由存储区</td><td align="center">堆</td></tr><tr><td align="center">内存分配成功的返回值</td><td align="center">完整类型指针</td><td align="center">void*</td></tr><tr><td align="center">内存分配失败的返回值</td><td align="center">默认抛出异常</td><td align="center">返回 NULL</td></tr><tr><td align="center">分配内存的大小</td><td align="center">由编译器根据类型计算得出</td><td align="center">必须显式指定字节数</td></tr><tr><td align="center">处理数组</td><td align="center">有处理数组的 new 版本 new[]</td><td align="center">需要用户计算数组的大小后进行内存分配</td></tr><tr><td align="center">是否相互调用</td><td align="center">可以，看具体的 operator new/delete 实现</td><td align="center">不可调用 new</td></tr><tr><td align="center">函数重载</td><td align="center">允许</td><td align="center">不允许</td></tr><tr><td align="center">构造函数与析构函数</td><td align="center">调用</td><td align="center">不调用</td></tr></tbody></table><h4 id="5-2-C-有了malloc-free，为什么还需要new-delete"><a href="#5-2-C-有了malloc-free，为什么还需要new-delete" class="headerlink" title="5.2 C++有了malloc/free，为什么还需要new/delete?"></a>5.2 C++有了malloc/free，为什么还需要new/delete?</h4><ul><li><code>malloc/free</code>是C++/C语言的标准库函数，<code>new/delete</code>是C++的运算符。他们都可用于申请动态内存和释放内存。</li><li>对于非内部数据类型的对象而言，只用<code>malloc/free</code>无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于<code>malloc/free</code>是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于<code>malloc/free</code>。</li><li>因此C++需要一个能完成动态内存分配和初始化工作的运算符<code>new</code>，以及一个能完成清理与释放内存工作的运算符<code>delete</code>。<code>new/delete</code>不是库函数，是运算符。</li></ul><h4 id="5-3-delete和delete-的区别"><a href="#5-3-delete和delete-的区别" class="headerlink" title="5.3 delete和delete[]的区别"></a>5.3 delete和delete[]的区别</h4><p><code>delete</code>只会调用一次析构函数，而<code>delete[]</code>会调用每个成员的析构函数</p><h4 id="5-4-内存泄漏与定位"><a href="#5-4-内存泄漏与定位" class="headerlink" title="5.4 内存泄漏与定位"></a>5.4 内存泄漏与定位</h4><p>内存泄漏并非指的是内存在物理上的消失，而是分配某段内存后，失去了对该内存的控制，造成内存的浪费。比如 C++ <code>new </code>之后没有 <code>delete</code>。</p><p><strong>定位内存泄露</strong>：</p><ol><li>在<code>windows</code>平台下通过<code>CRT</code>中的库函数进行检测；</li><li>在可能泄漏的调用前后生成块的快照，比较前后的状态，定位泄漏的位置</li><li><code>Linux</code>下通过工具<code>valgrind</code>检测</li></ol><h3 id="6-volatile有什么作用"><a href="#6-volatile有什么作用" class="headerlink" title="6. volatile有什么作用"></a>6. volatile有什么作用</h3><ul><li>状态寄存器一类的并行设备硬件寄存器。</li><li>一个中断服务子程序会访问到的非自动变量。</li><li>多线程间被几个任务共享的变量。</li></ul><h3 id="7-一个参数可以既是const又是volatile吗"><a href="#7-一个参数可以既是const又是volatile吗" class="headerlink" title="7. 一个参数可以既是const又是volatile吗"></a>7. 一个参数可以既是const又是volatile吗</h3><p>可以， 用<code>const</code> 和<code>volatile</code> 同时修饰变量， 表示这个变量在程序内部是只读的， 不能改变的， 只在程序外部条件变化下改变， 并且编译器不会优化这个变量。每次使用这个变量时， 都要小心地去内存读取这个变量的值， 而不是去寄存器读取它的备份。</p><p>注意： 在此一定要注意<code>const</code> 的意思，<code>const</code>只是不允许程序中的代码改变某一变量， 其在编译期发挥作用， 它并没有实际地禁止某段内存的读写特性。</p><h3 id="8-结构体内存对齐问题"><a href="#8-结构体内存对齐问题" class="headerlink" title="8. 结构体内存对齐问题"></a>8. 结构体内存对齐问题</h3><ul><li><p>结构体作为一种复合数据类型， 其构成元素既可以是基本数据类型的变量， 也可以是一些复合型类型数据。</p></li><li><p>对此， 编译器会自动进行成员变量的对齐以提高运算效率。默认情况下， 按自然对齐条件分配空间。各个成员按照它们被声明的顺序在内存中顺序存储， 第一个成员的地址和整个结构的地址相同， 向结构体成员中<code>size</code>最大的成员对齐。</p></li><li><p>每个数据成员存储的起始位置要从该成员大小的整数倍开始（比如<code>int</code>在32位机为4字节，则要从4的整数倍地址开始存储）。</p></li><li><p>收尾工作：结构体的总大小，也就是<code>sizeof</code>的结果，必须是其内部最大成员的整数倍，不足的要补齐</p></li></ul><h3 id="9-简述C、C-程序编译的内存分配情况"><a href="#9-简述C、C-程序编译的内存分配情况" class="headerlink" title="9. 简述C、C++程序编译的内存分配情况"></a>9. 简述C、C++程序编译的内存分配情况</h3><ul><li><p>从静态存储区域分配：</p><p>内存在程序编译时就已经分配好， 这块内存在程序的整个运行期间都存在。速度快、不容易出错， 因为有系统会善后。例如全局变量， <code>static</code>变量， 常量字符串等。</p></li><li><p>在栈上分配：</p><p>在执行函数时， 函数内局部变量的存储单元都在栈上创建， 函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中， 效率很高， 但是分配的内存容量有限。</p></li><li><p>从堆上分配：</p><p>即动态内存分配。程序在运行的时候用<code>malloc</code>或<code>new</code>申请任意大小的内存， 程序员自己负责在何 时用<code>free</code>或<code>delete</code>释放内存。动态内存的生存期由程序员决定， 使用非常灵活。如果在堆上分配了空间， 就有责任回收它， 否则运行的程序会出现内存泄漏， 另外频繁地分配和释放不同大小的堆空间将会产生堆内碎块。</p></li></ul><p>一个C 、C + + 程序编译时内存分为5大存储区： 堆区、栈区、全局/静态区、常量区、程序代码区。</p><h3 id="10-指针和引用？"><a href="#10-指针和引用？" class="headerlink" title="10. 指针和引用？"></a>10. 指针和引用？</h3><h4 id="10-1-指针和引用的区别"><a href="#10-1-指针和引用的区别" class="headerlink" title="10.1 指针和引用的区别"></a>10.1 指针和引用的区别</h4><ul><li><p><strong>初始化区别</strong>：引用必须被初始化，指针不必。</p></li><li><p><strong>可修改区别</strong>：引用初始化以后不能被改变，指针可以改变所指的对象。</p></li><li><p><strong>非空区别</strong>：不存在指向空值的引用，但是存在指向空值的指针。</p></li><li><p><strong>合法性区别</strong>：在使用引用之前不需要测试他的合法性；相反，指针则应该总是被测试，防止其为空。</p></li><li><p>应用区别</p><ul><li>使用指针的情况<ul><li>考虑到存在不指向任何对象的可能(在这种情况下，能够设置指针为空)</li><li>需要能够在不同时刻指向不同对象(在这种情况下，能够改变指针的指向)</li></ul></li><li><strong>使用引用的情况</strong>：总是指向一个对象并且一旦指向一个对象后就不会改变指向</li></ul></li></ul><h4 id="10-2-在什么时候需要使用“常引用”？"><a href="#10-2-在什么时候需要使用“常引用”？" class="headerlink" title="10.2 在什么时候需要使用“常引用”？"></a>10.2 <strong>在什么时候需要使用“常引用”？</strong></h4><p>如果既要利用引用提高程序的效率，又要保护传递给函数的数据不在函数中被改变，就应使用常引用。</p><h4 id="10-3-将“引用”作为函数返回值类型的优点和注意事项"><a href="#10-3-将“引用”作为函数返回值类型的优点和注意事项" class="headerlink" title="10.3 将“引用”作为函数返回值类型的优点和注意事项"></a>10.3 <strong>将“引用”作为函数返回值类型的优点和注意事项</strong></h4><p>好处：在内存中不产生返回值的副本，提高效率</p><p><strong>注意事项</strong>：</p><ol><li>不能返回局部变量的引用。主要原因是局部变量会在函数返回后被销毁，因此被返回的引用就成为了”无所指”的引用，程序会进入未知状态。</li><li>不能返回函数内部 <code>new </code>分配的内存的引用。原因是引用所指向的空间就无法释放，造成内存泄漏。</li><li>可以返回类成员的引用，但最好是 <code>const</code>。主要原因是如果其它对象可以获得该属性的非常量引用（或指针），那么对该属性的单纯赋值就会破坏业务规则的完整性。</li><li>流操作符和赋值操作符重载返回值申明为引用。</li><li>在另外的一些操作符中，却千万不能返回引用，例如四则运算符。</li></ol><h4 id="10-4-句柄和指针的区别与联系"><a href="#10-4-句柄和指针的区别与联系" class="headerlink" title="10.4 句柄和指针的区别与联系"></a>10.4 句柄和指针的区别与联系</h4><p>句柄和指针其实是两个截然不同的概念。</p><ul><li>Windows系统用句柄标记系统资源，隐藏系统的信息。只要知道有这个东西，然后去调用即可，他是一个<code>32bit</code>的<code>uint</code>。</li><li>指针则标记某个物理内存地址。</li></ul><h4 id="10-5-常量指针和指针常量"><a href="#10-5-常量指针和指针常量" class="headerlink" title="10.5 常量指针和指针常量"></a>10.5 常量指针和指针常量</h4><ul><li>常量指针是一个指针，读成常量的指针，指向一个只读变量。如<code>const int *p</code></li><li>指针常量是一个不能给改变指向的指针。指针是个常量，不能中途改变指向，如<code>int *const p</code></li></ul><p><strong>技巧</strong>：* 前面的是对被指向对象的修饰，* 后面的是对指针本身的修饰。</p><h2 id="11-20"><a href="#11-20" class="headerlink" title="11~20"></a>11~20</h2><h3 id="11-typedef和define有什么区别"><a href="#11-typedef和define有什么区别" class="headerlink" title="11. typedef和define有什么区别"></a>11. typedef和define有什么区别</h3><ul><li><p>用法不同：<code>typedef </code>用来定义一种数据类型的别名，增强程序的可读性。<code>define </code>主要用来定义常量，以及书写复杂使用频繁的宏。</p></li><li><p>执行时间不同：<code>typedef </code>是编译过程的一部分，有类型检查的功能。<code>define </code>是宏定义，是预编译的部分，其发生在编译之前，只是简单的进行字符串的替换，不进行类型的检查。</p></li></ul><h3 id="13-说一说extern“C”"><a href="#13-说一说extern“C”" class="headerlink" title="13. 说一说extern“C”"></a>13. 说一说extern“C”</h3><p><code>extern "C"</code>  的主要作用就是为了能够正确实现C + + 代码调用其他C 语言代码。加上<code>extern</code> “ C “ 后， 会指示编译器这部分代码按C 语言（ 而不是C + + ） 的方式进行编译。由于C + + 支持函数重载， 因此编译器编译函数的过程中会将函数的参数类型也加到编译后的代码中， 而不仅仅是函数名； 而C语言并不支持函数重载， 因此编译C语言代码的函数时不会带上函数的参数类型， 一般只包括函数名。</p><h3 id="14-什么是右值引用，跟左值又有什么区别？"><a href="#14-什么是右值引用，跟左值又有什么区别？" class="headerlink" title="14. 什么是右值引用，跟左值又有什么区别？"></a>14. 什么是右值引用，跟左值又有什么区别？</h3><ul><li>左值：能取地址，或者具名对象，表达式结束后依然存在的持久对象；</li><li>右值：不能取地址，匿名对象，表达式结束后就不再存在的临时对象； </li><li>左值能寻址，能赋值，可变。右值不能</li></ul><h3 id="15-说一说C-中四种cast转换"><a href="#15-说一说C-中四种cast转换" class="headerlink" title="15. 说一说C++中四种cast转换"></a>15. 说一说C++中四种cast转换</h3><p>C + + 中四种类型转换是：<code>static_cast</code>, <code>dynamic_cast</code>, <code>const_cast</code>,<br><code>reinterpret_cast</code></p><ol><li><code>static_cast</code></li></ol><ul><li>用于各种隐式转换，比如非<code>const</code>转<code>const</code>，<code>void*</code>转指针等, <code>static_cast</code>能用于多态向上转化，如果向下转能成功但是不安全，结果未知；</li></ul><ol start="2"><li><p><code>dynamic_cast</code></p><p>用于动态类型转换。只能用于含有虚函数的类， 用于类层次间的向上和向下转化。只能转指针或引用。向下转化时如果是非法的，对于指针返回NULL，对于引用抛异常 。要深入了解内部转换的原理。</p></li></ol><ul><li><p>向上转换：指的是子类向基类的转换</p></li><li><p>向下转换：指的是基类向子类的转换</p><p>它通过判断在执行到该语句的时候变量的运行时类型和要转换的类型是否相同来判断是否能够进行向下转换。</p></li></ul><ol start="3"><li><code>const_cast</code></li></ol><ul><li>用于将<code>const</code>变量转为非<code>const</code></li></ul><ol start="4"><li><code>reinterpret_cast</code></li></ol><ul><li>几乎什么都可以转，比如将int转指针，可能会出问题，尽量少用；</li></ul><ol start="5"><li>为什么不使用c++的强制转换？</li></ol><ul><li>C的强制转换表面上看起来功能强大什么都能转，但是转化不够明确，不能进行错误检查，容易出错。</li></ul><h3 id="16-C-的空类有哪些成员函数"><a href="#16-C-的空类有哪些成员函数" class="headerlink" title="16. C++的空类有哪些成员函数"></a>16. C++的空类有哪些成员函数</h3><ul><li>缺省构造函数。</li><li>缺省拷贝构造函数。</li><li>缺省析构函数。</li><li>缺省赋值运算符。</li><li>缺省取址运算符。</li><li>缺省取址运算符 <code>const </code>。</li></ul><h3 id="17-对C-中的smart-pointer四个智能指针的理解"><a href="#17-对C-中的smart-pointer四个智能指针的理解" class="headerlink" title="17. 对C++中的smart pointer四个智能指针的理解"></a>17. 对C++中的smart pointer四个智能指针的理解</h3><p>智能指针的作用是管理一个指针， 因为存在以下这种情况： 申请的空间在函数结束时忘记释放， 造成内存泄漏。使用智能指针可以很大程度上的避免这个问题，因为智能指针就是一个类， 当超出了类的作用域是， 类会自动调用析构函数，析构函数会自动释放资源。所以智能指针的作用原理就是在函数结束时自动释放内存空间， 不需要手动释放内存空间。</p><ul><li><p><code>auto_ptr</code>（c++98的方案，c++11已经抛弃）<br>采用所有权模式。</p><pre class="language-c" data-language="c"><code class="language-c">auto_ptr<span class="token operator">&lt;</span> string<span class="token operator">&gt;</span> <span class="token function">p1</span> <span class="token punctuation">(</span>new <span class="token function">string</span> <span class="token punctuation">(</span>"I reigned lonely as a cloud<span class="token punctuation">.</span>”<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>auto_ptr<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> p2<span class="token punctuation">;</span>p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span> <span class="token comment">//auto_ptr不会报错.</span></code></pre><p>此时不会报错， p2剥夺了p1的所有权， 但是当程序运行时访问p1将会报错。所以<code>auto_ptr</code>的缺点是： 存在潜在的内存崩溃问题！</p></li><li><p><code>unique_ptr</code>（替换<code>auto_ptr</code>）</p><p><code>unique_ptr</code>实现独占式拥有或严格拥有概念， 保证同一时间内只有一个智能指针可以指向该对象。它对于避免资源泄露( 例如“ 以<code>new</code>创建对象后因为发生异常而忘记调用<code>delete</code>” ) 特别有用。</p><p>采用所有权模式。</p><pre class="language-c" data-language="c"><code class="language-c">unique_ptr<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token function">p3</span> <span class="token punctuation">(</span>new <span class="token function">string</span> <span class="token punctuation">(</span><span class="token string">"auto"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//#4</span>unique_ptr<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> p4； <span class="token comment">//#5</span>p4 <span class="token operator">=</span> p3<span class="token punctuation">;</span><span class="token comment">//此时会报错！！</span></code></pre><p>另外<code>unique_ptr</code>还有更聪明的地方： 当程序试图将一个 <code>unique_ptr</code> 赋值给另一个时， 如果源<code>unique_ptr</code>是个临时右值， 编译器允许这么做； 如果源<code>unique_ptr</code>将存在一段时间， 编译器将禁止这么做， 比如：</p><pre class="language-c" data-language="c"><code class="language-c">unique_ptr<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token function">pu1</span><span class="token punctuation">(</span>new <span class="token function">string</span> <span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>unique_ptr<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> pu2<span class="token punctuation">;</span>pu2 <span class="token operator">=</span> pu1<span class="token punctuation">;</span> <span class="token comment">// #1 not allowed</span>unique_ptr<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> pu3<span class="token punctuation">;</span>pu3 <span class="token operator">=</span> unique_ptr<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">(</span>new <span class="token function">string</span> <span class="token punctuation">(</span><span class="token string">"You"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// #2 allowed</span></code></pre></li><li><p><code>shared_ptr</code></p><p><code>shared_ptr</code> 实现共享式拥有概念。多个智能指针可以指向相同对象， 该对象和其相关资源会在“ 最后一个引用被销毁” 时候释放。从名字<code>shared</code>就可以看出了资源可以被多个指针共享， 它使用计数机制来表明资源被几个指针共享。可以通过成员函数<code>use_count()</code> 来查看资源的所有者个数。除了可以通过<code>new</code> 来构造， 还可以通过传入<code>auto_ptr</code> , <code>unique_ptr</code> , <code>weak_ptr</code> 来构造。当我们调用<code>release()</code>时， 当前指针会释放资源所有权， 计数减一。当计数等于0 时， 资源会被释放。</p></li><li><p><code>weak_ptr</code></p><p><code>weak_ptr</code> 是一种不控制对象生命周期的智能指针， 它指向一个 <code>share_ptr</code>管理的对象。 <code>weak_ptr</code>只是提供了对管理对象的一个访问手段，<strong>它的最大作用在于协助<code>shared_ptr</code>工作，像旁观者那样观测资源的使用情况</strong>,它只可以从一个<code>share_ptr</code>或另一个<code>weak_ptr</code>对象构造, 它的构造和析构不会引起引用记数的增加或减少。<code>weak_ptr</code>是用来解决<code>share_ptr</code>相互引用时的死锁问题, 如果说两个<code>share_ptr</code>相互引用, 那么这两个指针的引用计数永远不可能下降为0 , 资源永远不会释放。</p></li></ul><h3 id="18-对虚函数和多态的理解"><a href="#18-对虚函数和多态的理解" class="headerlink" title="18. 对虚函数和多态的理解"></a>18. 对虚函数和多态的理解</h3><ul><li>多态的实现主要分为静态多态和动态多态， 静态多态主要是重载， 在编译的时候就已经确定； <strong>动态多态是用虚函数机制实现的</strong>， 在运行期间动态绑定。举个例子： 一个父类类型的指针指向一个子类对象时候， 使用父类的指针去调用子类中重写了的父类中的虚函数的时候， 会调用子类重写过后的函数， 在父类中声明为加了<code>virtual</code> 关键字的函数， 在子类中重写时候不需要加<code>virtual</code>也是虚函数。</li><li>虚函数的实现： 在有虚函数的类中， 类的最开始部分是一个虚函数表的指针，这个指针指向一个<strong>虚函数表</strong>， <strong>表中放了虚函数的地址</strong>， 实际的虚函数在代码段中。当子类继承了父类的时候也会继承其虚函数表， 当子类重写父类中虚函数时候， 会将其继承到的虚函数表中的地址替换为重新写的函数地址。使用了虚函数， 会增加访问内存开销， 降低效率。</li></ul><h3 id="19-vector的底层原理"><a href="#19-vector的底层原理" class="headerlink" title="19. vector的底层原理"></a>19. vector的底层原理</h3><ul><li><code>vector</code>底层是一个动态数组， 包含三个迭代器，<code>start</code>和<code>finish</code>之间是已经被使用的空间范围，<code>end_of_storage</code>是整块连续空间包括备用空间的尾部。</li><li>当空间不够装下数据<code>v.push_back(val)</code>时， 会自动申请另一片更大的空间（1.5倍或2倍）， 然后把原来的数据拷贝到新的内存空间， 接着释放原来的那片空间。</li><li>当释放或者删除<code>v.clear()</code>里面的数据时， 其存储空间不释放， 仅仅是清空了里面的数据。因此， 对<code>vector</code>的任何操作一旦引起了空间的重新配置， 指向原<code>vector</code>的所有迭代器会都失效了。</li></ul><h3 id="20-vector中的reserve和resize的区别"><a href="#20-vector中的reserve和resize的区别" class="headerlink" title="20. vector中的reserve和resize的区别"></a>20. vector中的reserve和resize的区别</h3><ul><li><code>reserve</code>是直接扩充到已经确定（<strong>最大容量</strong>）的大小，可以减少多次开辟、释放空间的问题（优化<code>push_back</code>），就可以提高效率，其次还可以减少多次要拷贝数据的问题。<code>reserve</code>只是保证<code>vector</code>中的空间大小（<code>capacity</code>）最少达到参数所指定的大小n。</li><li><code>resize()</code>可以改变有效空间（<strong>分配元素数量</strong>）的大小，也有改变默认值的功能。若<code>size</code> 大于<code>capacity</code>，则<code>capacity</code>的大小也会随着改变。</li></ul><h2 id="21-30"><a href="#21-30" class="headerlink" title="21~30"></a>21~30</h2><h3 id="21-vector中的size和capacity的区别"><a href="#21-vector中的size和capacity的区别" class="headerlink" title="21. vector中的size和capacity的区别"></a>21. vector中的size和capacity的区别</h3><ul><li><p><code>size</code>表示当前<code>vector</code>中有多少个元素<code>（finish - start）</code>;</p></li><li><p><code>capacity</code>函数则表示它已经分配的内存中可以容纳多少元素<code>（end_of_storage - start）</code></p></li></ul><h3 id="22-vector中erase方法与algorithm中的remove方法区别"><a href="#22-vector中erase方法与algorithm中的remove方法区别" class="headerlink" title="22. vector中erase方法与algorithm中的remove方法区别"></a>22. vector中erase方法与algorithm中的remove方法区别</h3><ul><li><p><code>vector</code>中<code>erase</code>方法真正删除了元素，迭代器不能访问了</p></li><li><p><code>remove</code>只是简单地将元素移到了容器的最后面，迭代器还是可以访问到。因为<code>algorithm</code>通过迭代器进行操作，不知道容器的内部结构，所以无法进行真正的删除。</p></li></ul><h3 id="23-vector迭代器失效的情况"><a href="#23-vector迭代器失效的情况" class="headerlink" title="23. vector迭代器失效的情况"></a>23. vector迭代器失效的情况</h3><ul><li><p>当插入一个元素到<code>vector</code>中，由于引起了内存重新分配，所以指向原内存的迭代器全部失效。</p></li><li><p>当删除容器中一个元素后，该迭代器所指向的元素已经被删除，那么也造成迭代器失效。<code>erase</code>方法会返回下一个有效的迭代器，所以当我们要删除某个元素时，需要<code>it=vec.erase(it)</code></p></li></ul><h3 id="24-list的底层原理"><a href="#24-list的底层原理" class="headerlink" title="24. list的底层原理"></a>24. list的底层原理</h3><ul><li><p><code>list</code>的底层是一个双向链表，使用链表存储数据，并不会将它们存储到一整块连续的内存空间中。恰恰相反，各元素占用的存储空间（又称为节点）是独立的、分散的，它们之间的线性关系通过指针来维持,每次插入或删除一个元素，就配置或释放一个元素空间。</p></li><li><p><code>list</code>不支持随机存取，如果需要大量的插入和删除，而不关心随即存取</p></li></ul><h3 id="25-map-、set、multiset、multimap的底层原理"><a href="#25-map-、set、multiset、multimap的底层原理" class="headerlink" title="25. map 、set、multiset、multimap的底层原理"></a>25. map 、set、multiset、multimap的底层原理</h3><p><code>map </code>、<code>set</code>、<code>multiset</code>、<code>multimap </code>的底层实现都是红黑树，<code>epoll</code>模型的底层数据结构也是红黑树，<code>linux</code> 系统中<code>CFS</code>进程调度算法， 也用到红黑树。</p><p>红黑树的特性：</p><ul><li>每个结点或是红色或是黑色；</li><li>根结点是黑色；</li><li>每个叶结点是黑的；</li><li>如果一个结点是红的，则它的两个儿子均是黑色；</li><li>每个结点到其子孙结点的所有路径上包含相同数目的黑色结点。</li></ul><h3 id="26-map-、set、multiset、multimap的特点"><a href="#26-map-、set、multiset、multimap的特点" class="headerlink" title="26. map 、set、multiset、multimap的特点"></a>26. map 、set、multiset、multimap的特点</h3><ul><li><p><code>set</code>和<code>multiset</code>会根据特定的排序准则自动将元素排序，<code>set</code>中元素不允许重复，<code>multiset</code>可以重复。</p></li><li><p><code>map</code>和<code>multimap</code>将<code>key</code>和<code>value</code>组成的<code>pair</code>作为元素，根据<code>key</code>的排序准则自动将元素排序（因为红黑树也是二叉搜索树，所以<code>map</code>默认是按<code>key</code>排序），<code>map</code>中元素的<code>key</code>不允许重复，<code>multimap</code>可以重复。</p></li><li><p><code>map</code>和<code>set</code>的增删改查速度为都是<code>logn</code>，是比较高效的。</p></li></ul><h3 id="27-为何map和set的插入删除效率比其他序列容器高，而且每次insert之后，以前保存的iterator不会失效？"><a href="#27-为何map和set的插入删除效率比其他序列容器高，而且每次insert之后，以前保存的iterator不会失效？" class="headerlink" title="27. 为何map和set的插入删除效率比其他序列容器高，而且每次insert之后，以前保存的iterator不会失效？"></a>27. 为何map和set的插入删除效率比其他序列容器高，而且每次insert之后，以前保存的iterator不会失效？</h3><ul><li><p>存储的是结点，不需要内存拷贝和内存移动。</p></li><li><p>插入操作只是结点指针换来换去，结点内存没有改变。而<code>iterator</code>就像指向结点的指针，内存没变，指向内存的指针也不会变。</p></li></ul><h3 id="29-C-文件编译与执行的四个阶段"><a href="#29-C-文件编译与执行的四个阶段" class="headerlink" title="29. C++文件编译与执行的四个阶段"></a>29. C++文件编译与执行的四个阶段</h3><ul><li><p>预处理：预处理用于将所有的<code>#include</code>头文件以及宏定义替换成其真正的内容，预处理之后得到的仍然是文本文件，但文件体积会大很多。<code>gcc</code>的预处理是预处理器<code>cpp</code>来完成的；</p></li><li><p>编译：将经过预处理之后的程序转换成特定汇编代码(assembly code)的过程；命令中<code>-S</code>让编译器在编译之后停止，不进行后续过程。</p></li><li><p>汇编：将上一步的汇编代码转换成机器码(machine code)，这一步产生的文件叫做目标文件，是二进制格式。<code>gcc</code>汇编过程通过<code>as</code>命令完成。</p></li><li><p>链接：链接过程将多个目标文件以及所需的库文件(.so等)链接成最终的可执行文件(executable file)。</p></li></ul><h3 id="30-构造函数为什么一般不定义为虚函数"><a href="#30-构造函数为什么一般不定义为虚函数" class="headerlink" title="30. 构造函数为什么一般不定义为虚函数"></a>30. 构造函数为什么一般不定义为虚函数</h3><ul><li>因为创建一个对象时需要确定对象的类型，而虚函数是在运行时确定其类型的。而在构造一个对象时，由于对象还未创建成功，编译器无法知道对象的实际类型，是类本身还是类的派生类等等</li><li><strong>虚函数的调用需要虚函数表指针</strong>，而该指针存放在对象的内存空间中；若构造函数声明为虚函数，那么由于对象还未创建，还没有内存空间，更没有虚函数表地址用来调用虚函数即构造函数了</li></ul><h2 id="31-40"><a href="#31-40" class="headerlink" title="31~40"></a>31~40</h2><h3 id="31-为什么析构函数最好声明为虚函数"><a href="#31-为什么析构函数最好声明为虚函数" class="headerlink" title="31. 为什么析构函数最好声明为虚函数"></a>31. 为什么析构函数最好声明为虚函数</h3><ul><li><p>当析构一个指向派生类的基类指针时，最好将基类的析构函数声明为虚函数，否则可能存在内存泄露的问题</p></li><li><p>如果析构函数不被声明成虚函数，则编译器实施静态绑定，在删除指向派生类的基类指针时，只会调用基类的析构函数而不调用派生类析构函数，这样就会造成派生类对象析构不完全。</p></li></ul><h3 id="32-深拷贝和浅拷贝的区别"><a href="#32-深拷贝和浅拷贝的区别" class="headerlink" title="32. 深拷贝和浅拷贝的区别"></a>32. 深拷贝和浅拷贝的区别</h3><p>深拷贝和浅拷贝可以简单的理解为：如果一个类拥有资源，当这个类的对象发生复制过程的时候，如果资源重新分配了就是深拷贝；反之没有重新分配资源，就是浅拷贝。</p><h3 id="33-移动语义"><a href="#33-移动语义" class="headerlink" title="33. 移动语义"></a>33. 移动语义</h3><p>将内存的所有权从一个对象转移到另外一个对象，高效的移动用来替换效率低下的复制，对象的移动语义需要实现移动构造函数（move constructor）和移动赋值运算符（move assignment operator）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-10&quot;&gt;&lt;a href=&quot;#1-10&quot; class=&quot;headerlink&quot; title=&quot;1~10&quot;&gt;&lt;/a&gt;1~10&lt;/h2&gt;&lt;h3 id=&quot;1-变量的声明和定义有什么区别&quot;&gt;&lt;a href=&quot;#1-变量的声明和定义有什么区别&quot; class=&quot;header</summary>
      
    
    
    
    <category term="八股文" scheme="http://sun-hailong.github.io/categories/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    
    <category term="C++" scheme="http://sun-hailong.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>从1到n整数中1出现的次数</title>
    <link href="http://sun-hailong.github.io/2022/03/04/1-n-zhong-1-de-ge-shu/"/>
    <id>http://sun-hailong.github.io/2022/03/04/1-n-zhong-1-de-ge-shu/</id>
    <published>2022-03-04T08:55:47.573Z</published>
    <updated>2022-03-04T11:49:36.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个整数 $n$，求从 $1$ 到 $n$ 这 $n$ 个整数的十进制表示中 1 出现的次数。</p><p>例如输入 $12$，从 $1$ 到$ 12$ 这些整数中包含‘’$1$‘’的数字有 $1$，$10$，$11$和$12$，其中‘’$1$‘’ 一共出现了 $5 $次。</p><p><strong>数据范围</strong></p><p>$1≤n≤10^9$</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>总的来说，就是通过求每个位上1出现次数 再累加起来。</p><p>我们拿一个5位数的百分位（其它位同理）举例，一种有3种情况：</p><p>① 百分位数字为0时，比如<font color="red"><strong>310</strong></font>56，百分位切割后：<code>a = 310 , b = 56</code>。</p><p>​    1出现的次数为：$(a/10) * 100$</p><p>② 百分位数字&gt;=2时，比如<font color="red"><strong>312</strong></font>56，百分位切割后：<code>a = 312 , b = 56</code>。</p><p>​    1出现的次数为：$(a/10+1) * 100$</p><p> ③ 百分位数字为1时，比如<font color="red"><strong>311</strong></font>56，百分位切割后：<code>a = 311 , b = 56</code>。</p><p>​    1出现的次数为：$(a/10)*100+(b+1)$</p><p><strong>所以整理下来可以得到：</strong></p><p>百分位代码表示为：$(a+8)/10*100+(a\ mod\ 10==1?b+1:0)$</p><p>千分位代码表示为：$(a+8)/10*1000+(a\ mod\ 10==1?b+1:0)$</p><p>万分位代码表示为：$(a+8)/10*10000+(a\ mod\ 10==1?b+1:0)$</p><p><strong>总的次数就是把它们加起来即可。</strong></p><p>还是以百分位为例：</p><p>之所以补$8$，是因为当百位为$0$，则$a/10==(a+8)/10$，</p><p>当百位$&gt;=2$，补$8$会产生进位，效果等同于$(a/10+1)$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numberOf1Between1AndN_Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> n <span class="token operator">/</span> i<span class="token punctuation">,</span> b <span class="token operator">=</span> n <span class="token operator">%</span> i<span class="token punctuation">;</span>         count <span class="token operator">+=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> b <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;输入一个整数 $n$，求从 $1$ 到 $n$ 这 $n$ 个整数的十进制表示中 1 出现的次数。&lt;/p&gt;
&lt;p&gt;例如输入 </summary>
      
    
    
    
    <category term="算法题" scheme="http://sun-hailong.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="剑指offer" scheme="http://sun-hailong.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>如何通俗理解信息熵</title>
    <link href="http://sun-hailong.github.io/2022/03/02/xin-xi-shang/"/>
    <id>http://sun-hailong.github.io/2022/03/02/xin-xi-shang/</id>
    <published>2022-03-02T14:11:21.433Z</published>
    <updated>2022-03-03T02:35:41.095Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看西瓜书中决策树的内容时，觉得对信息熵的理解还不是很深入，于是在网上看了不少讲解以后，加深了自己对信息熵的理解。</p><hr><h2 id="信息熵公式"><a href="#信息熵公式" class="headerlink" title="信息熵公式"></a>信息熵公式</h2><p>先扔出信息熵公式：</p><p>$$\Large H(x)=-\sum\limits_{i=1}^np(x_i)log_2p(x_i) $$</p><p><strong>其中$p(x_i)$表示随机事件$x_i$发生的概率</strong></p><h2 id="信息量"><a href="#信息量" class="headerlink" title="信息量"></a>信息量</h2><p>信息量是信息的度量，也就是考虑一个离散的随机变量$x$时，我们接受到了多少信息。</p><p>信息的大小跟随机事件的概率有关。<strong>越小概率的事情发生了产生的信息量越大</strong>，如湖南产生的地震了；<strong>越大概率的事情发生了产生的信息量越小</strong>，如太阳从东边升起来了（<strong>肯定发生嘛，没什么信息量</strong>）。这很好理解！</p><p>例子：</p><p>脑补一下一段日常对话：</p><p>室友A走过来，今天你们湖南益阳发生地震了！</p><p>我：啊？怎么可能，我们那边从来没有发生过地震，这概率也太小了吧，我得赶紧打个电话问问爸妈什么情况。<strong>你告诉我的这个事情信息量巨大啊！</strong></p><p>过了一会儿，室友B过来了：听说我们专业xxx同学又在调查各种人的情况。</p><p>我：哈哈哈哈，这事情大家早就已经知道了，这个人就是这样的，<strong>你这信息一点含金量都没有</strong>，下次八卦一点有用的事情吧~orz.</p><p><strong>因此一个具体事件的信息量应该是随着其发生概率而递减的，且不能为负。</strong></p><p>如果我们有两个不相关的事件$x$和$y$，那么我们观察到的两个事件同时发生时获得的信息应该等于观察到的事件各自发生时获得的信息之和，即：</p><p>$$\Large h(x,y)=h(x)+h(y)$$</p><p>由于$x,y$是两个不相关事件，所以   $$\Large p(xy)=p(x)·p(y)$$</p><p>根据上述推导，<strong>我们很容易看出$h(x)$与$p(x)$之间存在某种对数关系（因为只有对数之间相乘之后指数才会相加）</strong>。因此我们可以得到信息量公式如下：</p><p>$$\Large h(x)=-log_{2}p(x) $$</p><p><strong>大家肯定会有两个疑问：</strong></p><ol><li>为什么会有个负号</li></ol><p><strong>因为$p(x)$是小于1的，此时其对数为负数，其实信息量的定义为概率倒数的对数，所以负号实际上可以避免信息量为负数。</strong></p><ol start="2"><li>为什么底数为2</li></ol><p><strong>这是因为，我们只需要信息量满足低概率事件x对应于高的信息量，所以按照惯例就使用2作为底数了。</strong></p><h2 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a>信息熵</h2><p>下面我们正式引出信息熵。</p><p><strong>信息量度量的是一个具体事件发生了所带来的信息，而熵则是在结果出来之前对可能产生的信息量的期望——考虑该随机变量的所有可能取值，即所有可能发生事件所带来的信息量的期望。即</strong></p><p>$$\Large H(x)=-sum (p(x)log_{2}p(x) )$$</p><p>转换一下为：</p><p>$$\Large H(x)=-\sum\limits_{i=1}^np(x_i)log_2p(x_i)$$</p><p>最终我们的公式来源推导完成了。</p><p><strong>这里我再说一个对信息熵的理解。信息熵还可以作为一个系统复杂程度的度量，如果系统越复杂（相当于包含的信息量多），出现不同情况的种类越多，那么他的信息熵是比较大的。</strong></p><p><strong>如果一个系统越简单，出现情况种类很少（极端情况为1种情况，那么对应概率为1，那么对应的信息熵为0），此时的信息熵较小。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在看西瓜书中决策树的内容时，觉得对信息熵的理解还不是很深入，于是在网上看了不少讲解以后，加深了自己对信息熵的理解。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;信息熵公式&quot;&gt;&lt;a href=&quot;#信息熵公式&quot; class=&quot;headerlink&quot; title=&quot;信息熵公式&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://sun-hailong.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="信息熵" scheme="http://sun-hailong.github.io/tags/%E4%BF%A1%E6%81%AF%E7%86%B5/"/>
    
  </entry>
  
  <entry>
    <title>云服务器的配置文件</title>
    <link href="http://sun-hailong.github.io/2022/02/27/config-files/"/>
    <id>http://sun-hailong.github.io/2022/02/27/config-files/</id>
    <published>2022-02-27T09:50:33.006Z</published>
    <updated>2022-02-27T09:53:45.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bashrc"><a href="#bashrc" class="headerlink" title=".bashrc"></a>.bashrc</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ~/.bashrc: executed by bash(1) for non-login shells.</span><span class="token comment"># see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)</span><span class="token comment"># for examples</span><span class="token comment"># If not running interactively, don't do anything</span><span class="token keyword">case</span> $- <span class="token keyword">in</span>    *i*<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>      *<span class="token punctuation">)</span> <span class="token builtin class-name">return</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token comment"># don't put duplicate lines or lines starting with space in the history.</span><span class="token comment"># See bash(1) for more options</span><span class="token assign-left variable"><span class="token environment constant">HISTCONTROL</span></span><span class="token operator">=</span>ignoreboth<span class="token comment"># append to the history file, don't overwrite it</span><span class="token builtin class-name">shopt</span> -s histappend<span class="token comment"># for setting history length see HISTSIZE and HISTFILESIZE in bash(1)</span><span class="token assign-left variable"><span class="token environment constant">HISTSIZE</span></span><span class="token operator">=</span><span class="token number">1000</span><span class="token assign-left variable"><span class="token environment constant">HISTFILESIZE</span></span><span class="token operator">=</span><span class="token number">2000</span><span class="token comment"># check the window size after each command and, if necessary,</span><span class="token comment"># update the values of LINES and COLUMNS.</span><span class="token builtin class-name">shopt</span> -s checkwinsize<span class="token comment"># If set, the pattern "**" used in a pathname expansion context will</span><span class="token comment"># match all files and zero or more directories and subdirectories.</span><span class="token comment">#shopt -s globstar</span><span class="token comment"># make less more friendly for non-text input files, see lesspipe(1)</span><span class="token punctuation">[</span> -x /usr/bin/lesspipe <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span>/bin/sh lesspipe<span class="token variable">)</span></span>"</span><span class="token comment"># set variable identifying the chroot you work in (used in the prompt below)</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable">${debian_chroot<span class="token operator">:-</span>}</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> -r /etc/debian_chroot <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token assign-left variable">debian_chroot</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /etc/debian_chroot<span class="token variable">)</span></span><span class="token keyword">fi</span><span class="token comment"># set a fancy prompt (non-color, unless we know we "want" color)</span><span class="token keyword">case</span> <span class="token string">"<span class="token environment constant">$TERM</span>"</span> <span class="token keyword">in</span>    xterm-color<span class="token operator">|</span>*-256color<span class="token punctuation">)</span> <span class="token assign-left variable">color_prompt</span><span class="token operator">=</span>yes<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token comment"># uncomment for a colored prompt, if the terminal has the capability; turned</span><span class="token comment"># off by default to not distract the user: the focus in a terminal window</span><span class="token comment"># should be on the output of commands, not on the prompt</span><span class="token comment">#force_color_prompt=yes</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$force_color_prompt</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -x /usr/bin/tput <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> tput setaf <span class="token number">1</span> <span class="token operator">&gt;&amp;</span>/dev/null<span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token comment"># We have color support; assume it's compliant with Ecma-48</span>    <span class="token comment"># (ISO/IEC-6429). (Lack of such support is extremely rare, and such</span>    <span class="token comment"># a case would tend to support setf rather than setaf.)</span>    <span class="token assign-left variable">color_prompt</span><span class="token operator">=</span>yes    <span class="token keyword">else</span>    <span class="token assign-left variable">color_prompt</span><span class="token operator">=</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$color_prompt</span>"</span> <span class="token operator">=</span> <span class="token function">yes</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">'${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '</span><span class="token keyword">else</span>    <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">'${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '</span><span class="token keyword">fi</span><span class="token builtin class-name">unset</span> color_prompt force_color_prompt<span class="token comment"># If this is an xterm set the title to user@host:dir</span><span class="token keyword">case</span> <span class="token string">"<span class="token environment constant">$TERM</span>"</span> <span class="token keyword">in</span>xterm*<span class="token operator">|</span>rxvt*<span class="token punctuation">)</span>    <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">"\[<span class="token entity" title="\e">\e</span>]0;<span class="token variable">${debian_chroot<span class="token operator">:+</span>($debian_chroot)}</span>\u@\h: \w<span class="token entity" title="\a">\a</span>\]<span class="token environment constant">$PS1</span>"</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token comment"># enable color support of ls and also add handy aliases</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -x /usr/bin/dircolors <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">test</span> -r ~/.dircolors <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">dircolors</span> -b ~/.dircolors<span class="token variable">)</span></span>"</span> <span class="token operator">||</span> <span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">dircolors</span> -b<span class="token variable">)</span></span>"</span>    <span class="token builtin class-name">alias</span> <span class="token assign-left variable">ls</span><span class="token operator">=</span><span class="token string">'ls --color=auto'</span>    <span class="token comment">#alias dir='dir --color=auto'</span>    <span class="token comment">#alias vdir='vdir --color=auto'</span>    <span class="token builtin class-name">alias</span> <span class="token assign-left variable">grep</span><span class="token operator">=</span><span class="token string">'grep --color=auto'</span>    <span class="token builtin class-name">alias</span> <span class="token assign-left variable">fgrep</span><span class="token operator">=</span><span class="token string">'fgrep --color=auto'</span>    <span class="token builtin class-name">alias</span> <span class="token assign-left variable">egrep</span><span class="token operator">=</span><span class="token string">'egrep --color=auto'</span><span class="token keyword">fi</span><span class="token comment"># colored GCC warnings and errors</span><span class="token comment">#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'</span><span class="token comment"># some more ls aliases</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">ll</span><span class="token operator">=</span><span class="token string">'ls -alF'</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">la</span><span class="token operator">=</span><span class="token string">'ls -A'</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">l</span><span class="token operator">=</span><span class="token string">'ls -CF'</span><span class="token comment"># Add an "alert" alias for long running commands.  Use like so:</span><span class="token comment">#   sleep 10; alert</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">alert</span><span class="token operator">=</span><span class="token string">'notify-send --urgency=low -i "$([ $? = 0 ] &amp;&amp; echo terminal || echo error)" "$(history|tail -n1|sed -e '</span><span class="token punctuation">\</span>'<span class="token string">'s/^\s*[0-9]\+\s*//;s/[;&amp;|]\s*alert$//'</span><span class="token punctuation">\</span>'<span class="token string">')"'</span><span class="token comment"># Alias definitions.</span><span class="token comment"># You may want to put all your additions into a separate file like</span><span class="token comment"># ~/.bash_aliases, instead of adding them here directly.</span><span class="token comment"># See /usr/share/doc/bash-doc/examples in the bash-doc package.</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -f ~/.bash_aliases <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">.</span> ~/.bash_aliases<span class="token keyword">fi</span><span class="token comment"># enable programmable completion features (you don't need to enable</span><span class="token comment"># this, if it's already enabled in /etc/bash.bashrc and /etc/profile</span><span class="token comment"># sources /etc/bash.bashrc).</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token builtin class-name">shopt</span> -oq posix<span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> -f /usr/share/bash-completion/bash_completion <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">.</span> /usr/share/bash-completion/bash_completion  <span class="token keyword">elif</span> <span class="token punctuation">[</span> -f /etc/bash_completion <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">.</span> /etc/bash_completion  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/home/acs/.homework:<span class="token environment constant">$PATH</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">tmux</span><span class="token operator">=</span><span class="token string">'tmux -u'</span></code></pre><h2 id="tmux-conf"><a href="#tmux-conf" class="headerlink" title=".tmux.conf"></a>.tmux.conf</h2><pre class="language-bash" data-language="bash"><code class="language-bash">set-option -g status-keys <span class="token function">vi</span>setw -g mode-keys <span class="token function">vi</span>setw -g monitor-activity on<span class="token comment"># setw -g c0-change-trigger 10</span><span class="token comment"># setw -g c0-change-interval 100</span><span class="token comment"># setw -g c0-change-interval 50</span><span class="token comment"># setw -g c0-change-trigger  75</span>set-window-option -g automatic-rename onset-option -g set-titles on<span class="token builtin class-name">set</span> -g history-limit <span class="token number">100000</span><span class="token comment">#set-window-option -g utf8 on</span><span class="token comment"># set command prefix</span>set-option -g prefix C-aunbind-key C-bbind-key C-a send-prefix<span class="token builtin class-name">bind</span> h select-pane -L<span class="token builtin class-name">bind</span> j select-pane -D<span class="token builtin class-name">bind</span> k select-pane -U<span class="token builtin class-name">bind</span> l select-pane -R<span class="token builtin class-name">bind</span> -n M-Left select-pane -L<span class="token builtin class-name">bind</span> -n M-Right select-pane -R<span class="token builtin class-name">bind</span> -n M-Up select-pane -U<span class="token builtin class-name">bind</span> -n M-Down select-pane -D<span class="token builtin class-name">bind</span> <span class="token operator">&lt;</span> resize-pane -L <span class="token number">7</span><span class="token builtin class-name">bind</span> <span class="token operator">&gt;</span> resize-pane -R <span class="token number">7</span><span class="token builtin class-name">bind</span> - resize-pane -D <span class="token number">7</span><span class="token builtin class-name">bind</span> + resize-pane -U <span class="token number">7</span>bind-key -n M-l next-windowbind-key -n M-h previous-window<span class="token builtin class-name">set</span> -g status-interval <span class="token number">1</span><span class="token comment"># status bar</span><span class="token builtin class-name">set</span> -g status-bg black<span class="token builtin class-name">set</span> -g status-fg blue<span class="token comment">#set -g status-utf8 on</span><span class="token builtin class-name">set</span> -g status-justify centre<span class="token builtin class-name">set</span> -g status-bg default<span class="token builtin class-name">set</span> -g status-left <span class="token string">" #[fg=green]#S@#H #[default]"</span><span class="token builtin class-name">set</span> -g status-left-length <span class="token number">20</span><span class="token comment"># mouse support</span><span class="token comment"># for tmux 2.1</span><span class="token comment"># set -g mouse-utf8 on</span><span class="token builtin class-name">set</span> -g mouse on<span class="token comment">#</span><span class="token comment"># for previous version</span><span class="token comment">#set -g mode-mouse on</span><span class="token comment">#set -g mouse-resize-pane on</span><span class="token comment">#set -g mouse-select-pane on</span><span class="token comment">#set -g mouse-select-window on</span><span class="token comment">#set -g status-right-length 25</span><span class="token builtin class-name">set</span> -g status-right <span class="token string">"#[fg=green]%H:%M:%S #[fg=magenta]%a %m-%d #[default]"</span><span class="token comment"># fix for tmux 1.9</span><span class="token builtin class-name">bind</span> <span class="token string">'"'</span> split-window -vc <span class="token string">"#{pane_current_path}"</span><span class="token builtin class-name">bind</span> <span class="token string">'%'</span> split-window -hc <span class="token string">"#{pane_current_path}"</span><span class="token builtin class-name">bind</span> <span class="token string">'c'</span> new-window -c <span class="token string">"#{pane_current_path}"</span><span class="token comment"># run-shell "powerline-daemon -q"</span><span class="token comment"># vim: ft=conf</span></code></pre><h2 id="vimrc"><a href="#vimrc" class="headerlink" title=".vimrc"></a>.vimrc</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token string">" An example for a vimrc file."</span><span class="token string">" To use it, copy it to"</span>     <span class="token keyword">for</span> Unix and OS/2:  ~/.vimrc<span class="token string">"      for Amiga:  s:.vimrc"</span>  <span class="token keyword">for</span> MS-DOS and Win32:  <span class="token variable">$VIM</span><span class="token punctuation">\</span>_vimrc<span class="token string">"    for OpenVMS:  sys<span class="token variable">$login</span>:.vimrc"</span> When started as <span class="token string">"evim"</span>, evim.vim will already have <span class="token keyword">done</span> these settings.<span class="token keyword">if</span> v:progname <span class="token operator">=~</span>? <span class="token string">"evim"</span>  finishendif<span class="token string">" Use Vim settings, rather then Vi settings (much better!)."</span> This must be first, because it changes other options as a side effect.<span class="token builtin class-name">set</span> nocompatible<span class="token string">" allow backspacing over everything in insert modeset backspace=indent,eol,startif has("</span>vms<span class="token string">")  set nobackup"</span> <span class="token keyword">do</span> not keep a backup file, use versions instead<span class="token keyword">else</span>  <span class="token builtin class-name">set</span> backup<span class="token string">" keep a backup fileendifset history=50"</span> keep <span class="token number">50</span> lines of <span class="token builtin class-name">command</span> line <span class="token function">history</span><span class="token builtin class-name">set</span> ruler<span class="token string">" show the cursor position all the timeset showcmd"</span> display incomplete commands<span class="token builtin class-name">set</span> incsearch<span class="token string">" do incremental searching"</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token string">"My Setting-sunshanlu"</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>vmap <span class="token operator">&lt;</span>leader<span class="token operator">&gt;</span>y :w<span class="token operator">!</span> /tmp/vitmp<span class="token operator">&lt;</span>CR<span class="token operator">&gt;</span>nmap <span class="token operator">&lt;</span>leader<span class="token operator">&gt;</span>p :r<span class="token operator">!</span> <span class="token function">cat</span> /tmp/vitmp<span class="token operator">&lt;</span>CR<span class="token operator">&gt;</span><span class="token string">"语法高亮syntax enablesyntax on"</span>显示行号<span class="token builtin class-name">set</span> nu<span class="token string">"修改默认注释颜色"</span>hi Comment <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span>DarkCyan<span class="token string">"允许退格键删除"</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">backspace</span><span class="token operator">=</span><span class="token number">2</span><span class="token string">"启用鼠标set mouse=aset selection=exclusiveset selectmode=mouse,key"</span>按C语言格式缩进<span class="token builtin class-name">set</span> cindent<span class="token builtin class-name">set</span> autoindent<span class="token builtin class-name">set</span> smartindent<span class="token builtin class-name">set</span> <span class="token assign-left variable">shiftwidth</span><span class="token operator">=</span><span class="token number">4</span><span class="token string">" 允许在有未保存的修改时切换缓冲区"</span><span class="token builtin class-name">set</span> hidden<span class="token string">" 设置无备份文件set writebackupset nobackup"</span>显示括号匹配<span class="token builtin class-name">set</span> showmatch<span class="token string">"括号匹配显示时间为1(单位是十分之一秒)set matchtime=5"</span>显示当前的行号列号：<span class="token builtin class-name">set</span> ruler<span class="token string">"在状态栏显示正在输入的命令set showcmdset foldmethod=syntax"</span>默认情况下不折叠<span class="token builtin class-name">set</span> <span class="token assign-left variable">foldlevel</span><span class="token operator">=</span><span class="token number">100</span><span class="token string">" 开启状态栏信息set laststatus=2"</span> 命令行的高度，默认为1，这里设为2<span class="token builtin class-name">set</span> <span class="token assign-left variable">cmdheight</span><span class="token operator">=</span><span class="token number">2</span><span class="token string">" 显示Tab符，使用一高亮竖线代替set list"</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">listchars</span><span class="token operator">=</span>tab:<span class="token punctuation">\</span><span class="token operator">|</span><span class="token punctuation">\</span> ,<span class="token builtin class-name">set</span> <span class="token assign-left variable">listchars</span><span class="token operator">=</span>tab:<span class="token operator">&gt;</span>-,trail:-<span class="token string">"侦测文件类型filetype on"</span>载入文件类型插件filetype plugin on<span class="token string">"为特定文件类型载入相关缩进文件filetype indent on"</span> 启用自动补全filetype plugin indent on <span class="token string">"设置编码自动识别, 中文引号显示filetype on "</span>打开文件类型检测<span class="token string">"set fileencodings=euc-cn,ucs-bom,utf-8,cp936,gb2312,gb18030,gbk,big5,euc-jp,euc-kr,latin1set fileencodings=utf-8,gb2312,gbk,gb18030"</span>这个用能很给劲，不管encoding是什么编码，都能将文本显示汉字<span class="token string">"set termencoding=gb2312set termencoding=utf-8"</span>新建文件使用的编码<span class="token builtin class-name">set</span> <span class="token assign-left variable">fileencoding</span><span class="token operator">=</span>utf-8<span class="token string">"set fileencoding=gb2312"</span>用于显示的编码，仅仅是显示<span class="token builtin class-name">set</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span>utf-8<span class="token string">"set encoding=utf-8"</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span>euc-cn<span class="token string">"set encoding=gbk"</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span>gb2312<span class="token string">"set ambiwidth=doubleset fileformat=unix"</span>设置高亮搜索<span class="token builtin class-name">set</span> hlsearch<span class="token string">"在搜索时，输入的词句的逐字符高亮set incsearch"</span> 着色模式<span class="token builtin class-name">set</span> <span class="token assign-left variable">t_Co</span><span class="token operator">=</span><span class="token number">256</span><span class="token string">"colorscheme wombat256mod"</span>colorscheme gardener<span class="token string">"colorscheme elflordcolorscheme desert"</span>colorscheme evening<span class="token string">"colorscheme darkblue"</span>colorscheme torte<span class="token string">"colorscheme default"</span> 字体 <span class="token operator">&amp;&amp;</span> 字号<span class="token builtin class-name">set</span> <span class="token assign-left variable">guifont</span><span class="token operator">=</span>Monaco:h10<span class="token string">"set guifont=Consolas:h10"</span> :LoadTemplate       根据文件后缀自动加载模板<span class="token string">"let g:template_path='/home/ruchee/.vim/template/'"</span> :AuthorInfoDetect   自动添加作者、时间等信息，本质是NERD_commenter <span class="token operator">&amp;&amp;</span> authorinfo的结合<span class="token string">""</span><span class="token builtin class-name">let</span> g:vimrc_author<span class="token operator">=</span><span class="token string">'sunshanlu'</span><span class="token string">""</span><span class="token builtin class-name">let</span> g:vimrc_email<span class="token operator">=</span><span class="token string">'sunshanlu@baidu.com'</span><span class="token string">""</span><span class="token builtin class-name">let</span> g:vimrc_homepage<span class="token operator">=</span><span class="token string">'http://www.sunshanlu.com'</span><span class="token string">""</span><span class="token string">" Ctrl + E            一步加载语法模板和作者、时间信息"</span>"map <span class="token operator">&lt;</span>c-e<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>ESC<span class="token operator">&gt;</span>:AuthorInfoDetect<span class="token operator">&lt;</span>CR<span class="token operator">&gt;</span><span class="token operator">&lt;</span>ESC<span class="token operator">&gt;</span>Gi<span class="token string">""</span>imap <span class="token operator">&lt;</span>c-e<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>ESC<span class="token operator">&gt;</span>:AuthorInfoDetect<span class="token operator">&lt;</span>CR<span class="token operator">&gt;</span><span class="token operator">&lt;</span>ESC<span class="token operator">&gt;</span>Gi<span class="token string">""</span>vmap <span class="token operator">&lt;</span>c-e<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>ESC<span class="token operator">&gt;</span>:AuthorInfoDetect<span class="token operator">&lt;</span>CR<span class="token operator">&gt;</span><span class="token operator">&lt;</span>ESC<span class="token operator">&gt;</span>Gi<span class="token string">" ======= 引号 &amp;&amp; 括号自动匹配 ======= "</span><span class="token string">""</span>:inoremap <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>ESC<span class="token operator">&gt;</span>i<span class="token string">":inoremap ) &lt;c-r&gt;=ClosePair(')')&lt;CR&gt;"</span><span class="token string">":inoremap { {}&lt;ESC&gt;i"</span><span class="token string">":inoremap } &lt;c-r&gt;=ClosePair('}')&lt;CR&gt;"</span><span class="token string">":inoremap [ []&lt;ESC&gt;i"</span><span class="token string">":inoremap ] &lt;c-r&gt;=ClosePair(']')&lt;CR&gt;"</span><span class="token string">":inoremap &lt; &lt;&gt;&lt;ESC&gt;i"</span><span class="token string">":inoremap &gt; &lt;c-r&gt;=ClosePair('&gt;')&lt;CR&gt;"</span><span class="token string">""</span>:inoremap <span class="token string">" "</span>"<span class="token operator">&lt;</span>ESC<span class="token operator">&gt;</span>i<span class="token string">""</span>:inoremap <span class="token string">' '</span>'<span class="token operator">&lt;</span>ESC<span class="token operator">&gt;</span>i<span class="token string">""</span>:inoremap <span class="token variable"><span class="token variable">`</span> <span class="token variable">`</span></span><span class="token variable"><span class="token variable">`</span><span class="token operator">&lt;</span>ESC<span class="token operator">&gt;</span>i<span class="token string">""</span>:inoremap * **<span class="token operator">&lt;</span>ESC<span class="token operator">&gt;</span>i<span class="token string">" 每行超过80个的字符用下划线标示"</span>"au BufRead,BufNewFile *.s,*.asm,*.h,*.c,*.cpp,*.java,*.cs,*.lisp,*.el,*.erl,*.tex,*.sh,*.lua,*.pl,*.php,*.tpl,*.py,*.rb,*.erb,*.vim,*.js,*.jade,*.coffee,*.css,*.xml,*.html,*.shtml,*.xhtml Underlined /.<span class="token punctuation">\</span>%81v/<span class="token string">""</span><span class="token string">" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries"</span> <span class="token builtin class-name">let</span> <span class="token operator">&amp;</span>guioptions <span class="token operator">=</span> substitute<span class="token punctuation">(</span><span class="token operator">&amp;</span>guioptions, <span class="token string">"t"</span>, <span class="token string">""</span>, <span class="token string">"g"</span><span class="token punctuation">)</span><span class="token string">" Don't use Ex mode, use Q for formattingmap Q gq"</span> This is an alternative that also works <span class="token keyword">in</span> block mode, but the deleted<span class="token string">" text is lost and it only works for putting the current register."</span>vnoremap p <span class="token string">"_dp"</span> Switch syntax highlighting on, when the terminal has colors<span class="token string">" Also switch on highlighting the last used search pattern.if &amp;t_Co &gt; 2 || has("</span>gui_running<span class="token string">")  syntax on  set hlsearchendif"</span> Only <span class="token keyword">do</span> this part when compiled with support <span class="token keyword">for</span> autocommands.<span class="token keyword">if</span> has<span class="token punctuation">(</span><span class="token string">"autocmd"</span><span class="token punctuation">)</span>  <span class="token string">" Enable file type detection.  "</span> Use the default filetype settings, so that mail gets <span class="token string">'tw'</span> <span class="token builtin class-name">set</span> to <span class="token number">72</span>,  <span class="token string">" 'cindent' is on in C files, etc.  "</span> Also load indent files, to automatically <span class="token keyword">do</span> language-dependent indenting.  filetype plugin indent on  <span class="token string">" Put these in an autocmd group, so that we can delete them easily.  augroup vimrcEx  au!  "</span> For all text files <span class="token builtin class-name">set</span> <span class="token string">'textwidth'</span> to <span class="token number">80</span> characters.  autocmd FileType text setlocal <span class="token assign-left variable">textwidth</span><span class="token operator">=</span><span class="token number">80</span>  <span class="token string">" When editing a file, always jump to the last known cursor position.  "</span> Don<span class="token string">'t do it when the position is invalid or when inside an event handler  " (happens when dropping a file on gvim).  autocmd BufReadPost *    \ if line("'</span><span class="token punctuation">\</span>"<span class="token string">") &gt; 0 &amp;&amp; line("</span>'<span class="token punctuation">\</span>"<span class="token string">") &lt;= line("</span>$<span class="token string">") |    \   exe "</span>normal g<span class="token variable">`</span></span><span class="token punctuation">\</span>"<span class="token string">" |    \ endif  augroup ENDelse  set autoindent"</span> always <span class="token builtin class-name">set</span> autoindenting onendif <span class="token string">" has("</span>autocmd<span class="token string">")"</span> 增加鼠标行高亮<span class="token builtin class-name">set</span> cursorlinehi CursorLine  <span class="token assign-left variable">cterm</span><span class="token operator">=</span>NONE   <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span>darkred <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span>white<span class="token string">" 设置tab是四个空格set ts=4set expandtab"</span> 主要给Tlist使用<span class="token builtin class-name">let</span> Tlist_Exit_OnlyWindow <span class="token operator">=</span> <span class="token number">1</span><span class="token builtin class-name">let</span> Tlist_Auto_Open <span class="token operator">=</span> <span class="token number">1</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;bashrc&quot;&gt;&lt;a href=&quot;#bashrc&quot; class=&quot;headerlink&quot; title=&quot;.bashrc&quot;&gt;&lt;/a&gt;.bashrc&lt;/h2&gt;&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code c</summary>
      
    
    
    
    <category term="配置环境" scheme="http://sun-hailong.github.io/categories/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="配置文件" scheme="http://sun-hailong.github.io/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Linux-git</title>
    <link href="http://sun-hailong.github.io/2022/02/02/linux-git/"/>
    <id>http://sun-hailong.github.io/2022/02/02/linux-git/</id>
    <published>2022-02-02T06:04:44.135Z</published>
    <updated>2022-02-02T06:11:58.536Z</updated>
    
    <content type="html"><![CDATA[<h4 id="git基本概念"><a href="#git基本概念" class="headerlink" title="git基本概念"></a>git基本概念</h4><ul><li>工作区：仓库的目录。工作区是独立于各个分支的。</li><li>暂存区：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是独立于各个分支的。</li><li>版本库：存放所有已经提交到本地仓库的代码版本</li><li>版本结构：树结构，树中每个节点代表一个代码版本。</li></ul><h4 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h4><ol><li><code>git config --global user.name xxx</code>：设置全局用户名，信息记录在<code>~/.gitconfig</code>文件中</li><li><code>git config --global user.email xxx@xxx.com</code>：设置全局邮箱地址，信息记录在<code>~/.gitconfig</code>文件中</li><li><code>git init</code>：将当前目录配置成git仓库，信息记录在隐藏的<code>.git</code>文件夹中</li><li><code>git add XX</code>：将XX文件添加到暂存区<ul><li><code>git add . </code>：将所有待加入暂存区的文件加入暂存区</li></ul></li><li><code>git rm --cached XX</code>：将文件从仓库索引目录中删掉</li><li><code>git commit -m "给自己看的备注信息"</code>：将暂存区的内容提交到当前分支</li><li><code>git status</code>：查看仓库状态</li><li><code>git diff XX</code>：查看XX文件相对于暂存区修改了哪些内容</li><li><code>git log</code>：查看当前分支的所有版本</li><li><code>git reflog</code>：查看<code>HEAD</code>指针的移动历史（包括被回滚的版本）</li><li><code>git reset --hard HEAD^</code> 或 <code>git reset --hard HEAD~</code>：将代码库回滚到上一个版本<ul><li><code>git reset --hard HEAD^^</code>：往上回滚两次，以此类推</li><li><code>git reset --hard HEAD~100</code>：往上回滚100个版本</li><li><code>git reset --hard 版本号</code>：回滚到某一特定版本</li></ul></li><li><code>git checkout — XX</code>或<code>git restore XX</code>：将XX文件尚未加入暂存区的修改全部撤销</li><li><code>git remote add origin git@git.acwing.com:xxx/XXX.git</code>：将本地仓库关联到远程仓库</li><li><code>git push -u</code> (第一次需要-u以后不需要)：将当前分支推送到远程仓库<ul><li><code>git push origin branch_name</code>：将本地的某个分支推送到远程仓库</li></ul></li><li><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库XXX下载到当前目录下</li><li><code>git checkout -b branch_name</code>：创建并切换到<code>branch_name</code>这个分支</li><li><code>git branch</code>：查看所有分支和当前所处分支</li><li><code>git checkout branch_name</code>：切换到<code>branch_name</code>这个分支</li><li><code>git merge branch_name</code>：将分支<code>branch_name</code>合并到当前分支上</li><li><code>git branch -d branch_name</code>：删除本地仓库的<code>branch_name</code>分支</li><li><code>git branch branch_name</code>：创建新分支</li><li><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的branch_name分支</li><li><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</li><li><code>git pull</code>：将远程仓库的当前分支与本地仓库的当前分支合并<ul><li><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</li></ul></li><li><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的<code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应</li><li><code>git checkout -t origin/branch_name</code> ：将远程的<code>branch_name</code>分支拉取到本地</li><li><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中</li><li><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素</li><li><code>git stash drop</code>：删除栈顶存储的修改</li><li><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素</li><li><code>git stash list</code>：查看栈中所有元素</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;git基本概念&quot;&gt;&lt;a href=&quot;#git基本概念&quot; class=&quot;headerlink&quot; title=&quot;git基本概念&quot;&gt;&lt;/a&gt;git基本概念&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;工作区：仓库的目录。工作区是独立于各个分支的。&lt;/li&gt;
&lt;li&gt;暂存区：数据暂时存放的</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://sun-hailong.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="http://sun-hailong.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux-ssh</title>
    <link href="http://sun-hailong.github.io/2022/01/28/linux-ssh/"/>
    <id>http://sun-hailong.github.io/2022/01/28/linux-ssh/</id>
    <published>2022-01-28T08:35:34.616Z</published>
    <updated>2022-01-28T08:44:45.487Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h3 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h3><p><strong>基本用法</strong><br>远程登录服务器：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> user@hostname</code></pre><ul><li><code>user</code>: 用户名</li><li><code>hostname</code>: IP地址或域名</li></ul><p>第一次登录时会提示：</p><pre class="language-bash" data-language="bash"><code class="language-bash">The authenticity of <span class="token function">host</span> <span class="token string">'123.57.47.211 (123.57.47.211)'</span> can't be established.ECDSA key fingerprint is SHA256:iy237yysfCe013/l+kpDGfEG9xxHxm0dnxnAbJTPpG8.Are you sure you want to <span class="token builtin class-name">continue</span> connecting <span class="token punctuation">(</span>yes/no/<span class="token punctuation">[</span>fingerprint<span class="token punctuation">]</span><span class="token punctuation">)</span>?</code></pre><p>输入<code>yes</code>，然后回车即可。<br>这样会将该服务器的信息记录在<code>~/.ssh/known_hosts</code>文件中。</p><p>然后输入密码即可登录到远程服务器中。</p><hr><p><strong>配置文件</strong><br>创建文件 <code>~/.ssh/config</code>。</p><p>然后在文件中输入：</p><pre class="language-bash" data-language="bash"><code class="language-bash">Host myserver1    HostName IP地址或域名    User 用户名Host myserver2    HostName IP地址或域名    User 用户名</code></pre><p>之后再使用服务器时，可以直接使用别名<code>myserver1</code>、<code>myserver2</code>。</p><hr><p><strong>密钥登录</strong><br>创建密钥：</p><p><code>ssh-keygen</code></p><p>然后一直回车即可。</p><p>执行结束后，<code>~/.ssh/</code>目录下会多两个文件：</p><ul><li><code>id_rsa</code>：私钥</li><li><code>id_rsa.pub</code>：公钥</li></ul><hr><p>之后想免密码登录哪个服务器，就将公钥传给哪个服务器即可。</p><p>例如，想免密登录<code>myserver</code>服务器。则将公钥中的内容，复制到<code>myserver</code>中的<code>~/.ssh/authorized_keys</code>文件里即可。</p><p>也可以使用如下命令一键添加公钥：</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-copy-id myserver</code></pre><hr><p><strong>执行命令</strong><br>命令格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> user@hostname <span class="token builtin class-name">command</span></code></pre><p>例如：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> user@hostname <span class="token function">ls</span> -a</code></pre><p>或者</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 单引号中的$i可以求值</span><span class="token function">ssh</span> myserver <span class="token string">'for ((i = 0; i &lt; 10; i ++ )) do echo $i; done'</span></code></pre><p>或者</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 双引号中的$i不可以求值</span><span class="token function">ssh</span> myserver <span class="token string">"for <span class="token variable"><span class="token punctuation">((</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">))</span></span> do echo <span class="token variable">$i</span>; done"</span></code></pre><h3 id="scp传文件"><a href="#scp传文件" class="headerlink" title="scp传文件"></a>scp传文件</h3><p><strong>基本用法</strong><br>命令格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token builtin class-name">source</span> destination</code></pre><p>将<code>source</code>路径下的文件复制到<code>destination</code>中</p><hr><p><strong>一次复制多个文件：</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> source1 source2 destination</code></pre><hr><p><strong>复制文件夹：</strong></p><p>将本地家目录中的<code>tmp</code>文件夹复制到<code>myserver</code>服务器中的<code>/home/acs/</code>目录下。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> -r ~/tmp myserver:/home/acs/</code></pre><p>将本地家目录中的<code>tmp</code>文件夹复制到<code>myserver</code>服务器中的<code>~/homework/</code>目录下。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> -r ~/tmp myserver:homework/</code></pre><p>将<code>myserver</code>服务器中的<code>~/homework/</code>文件夹复制到本地的当前路径下。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> -r myserver:homework <span class="token builtin class-name">.</span></code></pre><hr><p>指定服务器的端口号：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> -P <span class="token number">22</span> source1 source2 destination</code></pre><p>注意： <code>scp</code>的<code>-r -P</code>等参数尽量加在<code>source</code>和<code>destination</code>之前。</p><hr><p>使用<code>scp</code>配置其他服务器的<code>vim</code>和<code>tmux</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> ~/.vimrc ~/.tmux.conf myserver:</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h3 id=&quot;ssh登录&quot;&gt;&lt;a href=&quot;#ssh登录&quot; class=&quot;headerlink&quot; title=&quot;ssh登录&quot;&gt;&lt;/a&gt;ssh登录&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;基本用法&lt;/strong&gt;&lt;br&gt;远程登录服务器：&lt;/p&gt;
&lt;pre cl</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://sun-hailong.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="http://sun-hailong.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux-shell语法</title>
    <link href="http://sun-hailong.github.io/2022/01/27/linux-shell-yu-fa/"/>
    <id>http://sun-hailong.github.io/2022/01/27/linux-shell-yu-fa/</id>
    <published>2022-01-27T04:10:54.298Z</published>
    <updated>2022-02-24T01:56:30.281Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h3 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h3><p>shell是我们通过命令行与操作系统沟通的语言。</p><p>shell脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用。<br>AC Terminal中的命令行可以看成是一个“<strong>shell脚本在逐行执行</strong>”。</p><p>Linux中常见的shell脚本有很多种，常见的有：</p><ul><li>Bourne Shell(<code>/usr/bin/sh</code>或<code>/bin/sh</code>)</li><li>Bourne Again Shell(<code>/bin/bash</code>)</li><li>C Shell(<code>/usr/bin/csh</code>)</li><li>K Shell(<code>/usr/bin/ksh</code>)</li><li>zsh</li><li>…<br>Linux系统中一般默认使用bash，所以接下来讲解bash中的语法。<br>文件开头需要写<code>#! /bin/bash</code>，指明bash为脚本解释器。</li></ul><p><strong>脚本示例</strong><br>新建一个<code>test.sh</code>文件，内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello World!"</span></code></pre><p><strong>运行方式</strong><br>作为可执行文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token function">chmod</span> +x test.sh  <span class="token comment"># 使脚本具有可执行权限</span>acs@9e0ebfcd82d7:~$ ./test.sh  <span class="token comment"># 当前路径下执行</span>Hello World<span class="token operator">!</span>  <span class="token comment"># 脚本输出</span>acs@9e0ebfcd82d7:~$ /home/acs/test.sh  <span class="token comment"># 绝对路径下执行</span>Hello World<span class="token operator">!</span>  <span class="token comment"># 脚本输出</span>acs@9e0ebfcd82d7:~$ ~/test.sh  <span class="token comment"># 家目录路径下执行</span>Hello World<span class="token operator">!</span>  <span class="token comment"># 脚本输出</span></code></pre><p>用解释器执行</p><pre class="language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token function">bash</span> test.shHello World<span class="token operator">!</span>  <span class="token comment"># 脚本输出</span></code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p><strong>单行注释</strong><br>每行中<code>#</code>之后的内容均是注释。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这是一行注释</span><span class="token builtin class-name">echo</span> <span class="token string">'Hello World'</span>  <span class="token comment">#  这也是注释</span></code></pre><hr><p><strong>多行注释</strong><br>格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash">:<span class="token operator">&lt;&lt;</span><span class="token string">EOF第一行注释第二行注释第三行注释EOF</span></code></pre><p>其中<code>EOF</code>可以换成其它任意字符串。例如：</p><pre class="language-bash" data-language="bash"><code class="language-bash">:<span class="token operator">&lt;&lt;</span><span class="token string">abc第一行注释第二行注释第三行注释abc</span>:<span class="token operator">&lt;&lt;</span><span class="token operator">!</span>第一行注释第二行注释第三行注释<span class="token operator">!</span></code></pre><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><strong>定义变量</strong><br>定义变量，不需要加<code>$</code>符号，例如：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name1</span><span class="token operator">=</span><span class="token string">'yxc'</span>  <span class="token comment"># 单引号定义字符串</span><span class="token assign-left variable">name2</span><span class="token operator">=</span><span class="token string">"yxc"</span>  <span class="token comment"># 双引号定义字符串</span><span class="token assign-left variable">name3</span><span class="token operator">=</span>yxc    <span class="token comment"># 也可以不加引号，同样表示字符串</span></code></pre><hr><p><strong>使用变量</strong><br>使用变量，需要加上<code>$</code>符号，或者<code>${}</code>符号。花括号是可选的，主要为了帮助解释器识别变量边界。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>yxc<span class="token builtin class-name">echo</span> <span class="token variable">$name</span>  <span class="token comment"># 输出yxc</span><span class="token builtin class-name">echo</span> <span class="token variable">${name}</span>  <span class="token comment"># 输出yxc</span><span class="token builtin class-name">echo</span> <span class="token variable">${name}</span>acwing  <span class="token comment"># 输出yxcacwing</span></code></pre><hr><p><strong>只读变量</strong><br>使用<code>readonly</code>或者<code>declare</code>可以将变量变为只读。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>yxc<span class="token builtin class-name">readonly</span> name<span class="token builtin class-name">declare</span> -r name  <span class="token comment"># 两种写法均可</span><span class="token assign-left variable">name</span><span class="token operator">=</span>abc  <span class="token comment"># 会报错，因为此时name只读</span></code></pre><hr><p><strong>删除变量</strong><br><code>unset</code>可以删除变量。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>yxc<span class="token builtin class-name">unset</span> name<span class="token builtin class-name">echo</span> <span class="token variable">$name</span>  <span class="token comment"># 输出空行</span></code></pre><hr><p><strong>变量类型</strong></p><ol><li>自定义变量（局部变量）<br>子进程不能访问的变量</li><li>环境变量（全局变量）<br>子进程可以访问的变量</li></ol><p>自定义变量改成环境变量：</p><pre class="language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token assign-left variable">name</span><span class="token operator">=</span>yxc  <span class="token comment"># 定义变量</span>acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">export</span> name  <span class="token comment"># 第一种方法</span>acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">declare</span> -x name  <span class="token comment"># 第二种方法</span></code></pre><p>环境变量改为自定义变量：</p><pre class="language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>yxc  <span class="token comment"># 定义环境变量</span>acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">declare</span> +x name  <span class="token comment"># 改为自定义变量</span></code></pre><hr><p><strong>字符串</strong><br>字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p>单引号与双引号的区别：</p><ul><li>单引号中的内容会原样输出，不会执行、不会取变量；</li><li>双引号中的内容可以执行、可以取变量</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>yxc  <span class="token comment"># 不用引号</span><span class="token builtin class-name">echo</span> <span class="token string">'hello, $name \"hh\"'</span>  <span class="token comment"># 单引号字符串，输出 hello, $name \"hh\"</span><span class="token builtin class-name">echo</span> <span class="token string">"hello, <span class="token variable">$name</span> <span class="token entity" title="\&quot;">\"</span>hh<span class="token entity" title="\&quot;">\"</span>"</span>  <span class="token comment"># 双引号字符串，输出 hello, yxc "hh"</span></code></pre><p>获取字符串长度</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"yxc"</span><span class="token builtin class-name">echo</span> <span class="token variable">${<span class="token operator">#</span>name}</span>  <span class="token comment"># 输出3</span></code></pre><p>提取子串</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"hello, yxc"</span><span class="token builtin class-name">echo</span> <span class="token variable">${name<span class="token operator">:</span>0<span class="token operator">:</span>5}</span>  <span class="token comment"># 提取从0开始的5个字符</span></code></pre><h3 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h3><p><strong>文件参数变量</strong><br>在执行shell脚本时，可以向脚本传递参数。<code>$1</code>是第一个参数，<code>$2</code>是第二个参数，以此类推。特殊的，<code>$0</code>是文件名（包含路径）。例如：</p><p>创建文件<code>test.sh</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"文件名："</span><span class="token variable">$0</span><span class="token builtin class-name">echo</span> <span class="token string">"第一个参数："</span><span class="token variable">$1</span><span class="token builtin class-name">echo</span> <span class="token string">"第二个参数："</span><span class="token variable">$2</span><span class="token builtin class-name">echo</span> <span class="token string">"第三个参数："</span><span class="token variable">$3</span><span class="token builtin class-name">echo</span> <span class="token string">"第四个参数："</span><span class="token variable">$4</span></code></pre><p>然后执行该脚本：</p><pre class="language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token function">chmod</span> +x test.sh acs@9e0ebfcd82d7:~$ ./test.sh <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span>文件名：./test.sh第一个参数：1第二个参数：2第三个参数：3第四个参数：4</code></pre><hr><p><strong>其它参数相关变量</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>$#</code></td><td>代表文件传入的参数个数，如上例中值为4</td></tr><tr><td><code>$*</code></td><td>由所有参数构成的用空格隔开的字符串，如上例中值为<code>"$1 $2 $3 $4"</code></td></tr><tr><td><code>$@</code></td><td>每个参数分别用双引号括起来的字符串，如上例中值为<code>"$1" "$2" "$3" "$4"</code></td></tr><tr><td><code>$$</code></td><td>脚本当前运行的进程ID</td></tr><tr><td><code>$?</code></td><td>上一条命令的退出状态（注意不是stdout，而是exit code）。0表示正常退出，其他值表示错误</td></tr><tr><td><code>$(command)</code></td><td>返回<code>command</code>这条命令的stdout（可嵌套）</td></tr><tr><td>`command`</td><td>返回<code>command</code>这条命令的stdout（不可嵌套）</td></tr></tbody></table><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组中可以存放多个不同类型的值，只支持一维数组，初始化时不需要指明数组大小。<br>数组<strong>下标从0开始</strong>。</p><hr><p><strong>定义</strong><br>数组用小括号表示，元素之间用空格隔开。例如：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> abc <span class="token string">"def"</span> yxc<span class="token punctuation">)</span></code></pre><p>也可以直接定义数组中某个元素的值：</p><pre class="language-bash" data-language="bash"><code class="language-bash">array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>abcarray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"def"</span>array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>yxc</code></pre><hr><p><strong>读取数组中某个元素的值</strong><br>格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token variable">${array<span class="token punctuation">[</span>index<span class="token punctuation">]</span>}</span></code></pre><p>例如：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> abc <span class="token string">"def"</span> yxc<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token variable">${array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>  <span class="token comment"># 第一种写法</span><span class="token builtin class-name">echo</span> <span class="token variable">${array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>  <span class="token comment"># 第二种写法</span></code></pre><hr><p><strong>数组长度</strong><br>类似于字符串</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token variable">${<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>  <span class="token comment"># 第一种写法</span><span class="token variable">${<span class="token operator">#</span>array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>  <span class="token comment"># 第二种写法</span></code></pre><p>例如：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> abc <span class="token string">"def"</span> yxc<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token variable">${<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>  <span class="token comment"># 第一种写法</span><span class="token builtin class-name">echo</span> <span class="token variable">${<span class="token operator">#</span>array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>  <span class="token comment"># 第二种写法</span></code></pre><h3 id="expr命令"><a href="#expr命令" class="headerlink" title="expr命令"></a>expr命令</h3><p><code>expr</code>命令用于求表达式的值，格式为：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">expr</span> 表达式</code></pre><p>表达式说明：</p><ul><li>用空格隔开每一项</li><li>用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可以试试转义）</li><li>对包含空格和其他特殊字符的字符串要用引号括起来</li><li>expr会在stdout中输出结果。如果为逻辑关系表达式，则结果为真，stdout为1，否则为0。</li><li>expr的exit code：如果为逻辑关系表达式，则结果为真，exit code为0，否则为1。</li></ul><hr><p><strong>字符串表达式</strong></p><ul><li><code>length STRING</code><br>返回<code>STRING</code>的长度</li><li><code>index STRING CHARSET</code><br><code>CHARSET</code>中任意单个字符在<code>STRING</code>中最前面的字符位置，<strong>下标从1开始</strong>。如果在<code>STRING</code>中完全不存在<code>CHARSET</code>中的字符，则返回0。</li><li><code>substr STRING POSITION LENGTH</code><br>返回<code>STRING</code>字符串中从<code>POSITION</code>开始，长度最大为<code>LENGTH</code>的子串。如果<code>POSITION</code>或<code>LENGTH</code>为负数，0或非数值，则返回空字符串。</li></ul><p>示例：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">"Hello World!"</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> length <span class="token string">"<span class="token variable">$str</span>"</span><span class="token variable">`</span></span>  <span class="token comment"># ``不是单引号，表示执行该命令，输出12</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> index <span class="token string">"<span class="token variable">$str</span>"</span> aWd<span class="token variable">`</span></span>  <span class="token comment"># 输出7，下标从1开始</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> substr <span class="token string">"<span class="token variable">$str</span>"</span> <span class="token number">2</span> <span class="token number">3</span><span class="token variable">`</span></span>  <span class="token comment"># 输出 ell</span></code></pre><hr><p><strong>整数表达式</strong></p><p><code>expr</code>支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。</p><ul><li><code>-</code><br>加减运算。两端参数会转换为整数，如果转换失败则报错。</li></ul><ul><li><code>/ %</code><br>乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</li></ul><ul><li><code>() </code>可以该表优先级，<strong>但需要用反斜杠转义。</strong></li></ul><p>示例：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a + $b<span class="token variable">`</span></span>  <span class="token comment"># 输出7</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a - $b<span class="token variable">`</span></span>  <span class="token comment"># 输出-1</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span>* $b<span class="token variable">`</span></span>  <span class="token comment"># 输出12，*需要转义</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a / $b<span class="token variable">`</span></span>  <span class="token comment"># 输出0，整除</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a % $b<span class="token variable">`</span></span> <span class="token comment"># 输出3</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token punctuation">\</span><span class="token punctuation">(</span> $a + <span class="token number">1</span> <span class="token punctuation">\</span><span class="token punctuation">)</span> <span class="token punctuation">\</span>* <span class="token punctuation">\</span><span class="token punctuation">(</span> $b + <span class="token number">1</span> <span class="token punctuation">\</span><span class="token punctuation">)</span><span class="token variable">`</span></span>  <span class="token comment"># 输出20，值为(a + 1) * (b + 1)</span></code></pre><hr><p><strong>逻辑关系表达式</strong></p><ul><li><p><code>|</code><br>如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数。</p></li><li><p><code>&amp;</code><br>如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。</p></li><li><p><code>&lt; &lt;= = == != &gt;= &gt;</code><br>比较两端的参数，如果为true，则返回1，否则返回0。”==”是”=”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</p></li><li><p><code>() </code>可以该表优先级，但需要用反斜杠转义</p></li></ul><p>示例：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span><span class="token operator">&gt;</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出0，&gt;需要转义</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token string">'&lt;'</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出1，也可以将特殊字符用引号引起来</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token string">'&gt;='</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出0</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span><span class="token operator">&lt;</span><span class="token punctuation">\</span><span class="token operator">=</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出1</span><span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token number">5</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $c <span class="token punctuation">\</span><span class="token operator">&amp;</span> $d<span class="token variable">`</span></span>  <span class="token comment"># 输出0</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span><span class="token operator">&amp;</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出3</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $c <span class="token punctuation">\</span><span class="token operator">|</span> $d<span class="token variable">`</span></span>  <span class="token comment"># 输出5</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span><span class="token operator">|</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出3</span></code></pre><h3 id="read命令"><a href="#read命令" class="headerlink" title="read命令"></a>read命令</h3><p><code>read</code>命令用于从标准输入中读取单行数据。当读到文件结束符时，<code>exit code</code>为1，否则为0。</p><p>参数说明</p><ul><li><code>-p</code>: 后面可以接提示信息</li><li><code>-t</code>：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令</li></ul><p>实例：</p><pre class="language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">read</span> name  <span class="token comment"># 读入name的值</span>acwing yxc  <span class="token comment"># 标准输入</span>acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">echo</span> <span class="token variable">$name</span>  <span class="token comment"># 输出name的值</span>acwing yxc  <span class="token comment">#标准输出</span>acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">read</span> -p <span class="token string">"Please input your name: "</span> -t <span class="token number">30</span> name  <span class="token comment"># 读入name的值，等待时间30秒</span>Please input your name: acwing yxc  <span class="token comment"># 标准输入</span>acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">echo</span> <span class="token variable">$name</span>  <span class="token comment"># 输出name的值</span>acwing yxc  <span class="token comment"># 标准输出</span></code></pre><h3 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h3><p><code>echo</code>用于输出字符串。命令格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> STRING</code></pre><hr><p><strong>显示普通字符串</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Hello AC Terminal"</span><span class="token builtin class-name">echo</span> Hello AC Terminal  <span class="token comment"># 引号可以省略</span></code></pre><hr><p><strong>显示转义字符</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token entity" title="\&quot;">\"</span>Hello AC Terminal<span class="token entity" title="\&quot;">\"</span>"</span>  <span class="token comment"># 注意只能使用双引号，如果使用单引号，则不转义</span><span class="token builtin class-name">echo</span> <span class="token punctuation">\</span>"Hello AC Terminal<span class="token punctuation">\</span>"  <span class="token comment"># 也可以省略双引号</span></code></pre><hr><p><strong>显示变量</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>yxc<span class="token builtin class-name">echo</span> <span class="token string">"My name is <span class="token variable">$name</span>"</span>  <span class="token comment"># 输出 My name is yxc</span></code></pre><hr><p><strong>显示换行</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> -e <span class="token string">"Hi<span class="token entity" title="\n">\n</span>"</span>  <span class="token comment"># -e 开启转义</span><span class="token builtin class-name">echo</span> <span class="token string">"acwing"</span></code></pre><p>输出结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash">Hiacwing</code></pre><hr><p><strong>显示不换行</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> -e <span class="token string">"Hi <span class="token entity" title="\c">\c</span>"</span> <span class="token comment"># -e 开启转义 \c 不换行</span><span class="token builtin class-name">echo</span> <span class="token string">"acwing"</span></code></pre><p>输出结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash">Hi acwing</code></pre><hr><p><strong>显示结果定向至文件</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Hello World"</span> <span class="token operator">&gt;</span> output.txt  <span class="token comment"># 将内容以覆盖的方式输出到output.txt中</span></code></pre><hr><p><strong>原样输出字符串，不进行转义或取变量(用单引号)</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>acwing<span class="token builtin class-name">echo</span> <span class="token string">'$name\"'</span></code></pre><p>输出结果:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$name</span><span class="token punctuation">\</span>"</code></pre><hr><p><strong>显示命令的执行结果</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">date</span><span class="token variable">`</span></span></code></pre><p>输出结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash">Thu Jan <span class="token number">27</span> <span class="token number">15</span>:39:03 CST <span class="token number">2022</span></code></pre><h3 id="printf命令"><a href="#printf命令" class="headerlink" title="printf命令"></a>printf命令</h3><p><code>printf</code>命令用于格式化输出，类似于C/C++中的<code>printf</code>函数。</p><p>默认<strong>不会在字符串末尾添加换行符</strong>。</p><p>命令格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">printf</span> format-string <span class="token punctuation">[</span>arguments<span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><hr><p><strong>用法示例</strong><br>脚本内容：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">printf</span> <span class="token string">"%10d.<span class="token entity" title="\n">\n</span>"</span> <span class="token number">123</span>  <span class="token comment"># 占10位，右对齐</span><span class="token builtin class-name">printf</span> <span class="token string">"%-10.2f.<span class="token entity" title="\n">\n</span>"</span> <span class="token number">123.123321</span>  <span class="token comment"># 占10位，保留2位小数，左对齐</span><span class="token builtin class-name">printf</span> <span class="token string">"My name is %s<span class="token entity" title="\n">\n</span>"</span> <span class="token string">"yxc"</span>  <span class="token comment"># 格式化输出字符串</span><span class="token builtin class-name">printf</span> <span class="token string">"%d * %d = %d<span class="token entity" title="\n">\n</span>"</span>  <span class="token number">2</span> <span class="token number">3</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">2</span> <span class="token punctuation">\</span>* <span class="token number">3</span><span class="token variable">`</span></span> <span class="token comment"># 表达式的值作为参数</span></code></pre><p>输出结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash">       <span class="token number">123</span>.<span class="token number">123.12</span>    <span class="token builtin class-name">.</span>My name is yxc<span class="token number">2</span> * <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">6</span></code></pre><h3 id="test命令与判断符号"><a href="#test命令与判断符号" class="headerlink" title="test命令与判断符号[]"></a>test命令与判断符号[]</h3><p><strong>逻辑运算符&amp;&amp;和||</strong></p><ul><li><code>&amp;&amp;</code> 表示与，<code>|| </code>表示或</li><li>二者具有短路原则：<br><code>expr1 &amp;&amp; expr2</code>：当<code>expr1</code>为假时，直接忽略<code>expr2</code><br><code>expr1 || expr2</code>：当<code>expr1</code>为真时，直接忽略<code>expr2</code></li><li>表达式的<code>exit code</code>为0，表示真；为非零，表示假。（<strong>与<code>C/C++</code>中的定义相反</strong>）</li></ul><hr><p><strong>test命令</strong></p><p>在命令行中输入<code>man test</code>，可以查看<code>tes</code>t命令的用法。</p><p><code>test</code>命令用于判断文件类型，以及对变量做比较。</p><p><code>test</code>命令用<code>exit code</code>返回结果，而不是使用<code>stdout</code>。0表示真，非0表示假。</p><p>例如：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> <span class="token number">2</span> -lt <span class="token number">3</span>  <span class="token comment"># 为真，返回值为0</span><span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 输出上个命令的返回值，输出0</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token function">ls</span>  <span class="token comment"># 列出当前目录下的所有文件</span>homework  output.txt  test.sh  tmpacs@9e0ebfcd82d7:~$ <span class="token builtin class-name">test</span> -e test.sh <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"exist"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Not exist"</span>exist  <span class="token comment"># test.sh 文件存在</span>acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">test</span> -e test2.sh <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"exist"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Not exist"</span>Not exist  <span class="token comment"># testh2.sh 文件不存在</span></code></pre><hr><p><strong>文件类型判断</strong><br>命令格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> -e filename  <span class="token comment"># 判断文件是否存在</span></code></pre><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-e</td><td>文件是否存在</td></tr><tr><td>-f</td><td>是否为文件</td></tr><tr><td>-d</td><td>是否为目录</td></tr></tbody></table><hr><p><strong>文件权限判断</strong></p><p>命令格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> -r filename  <span class="token comment"># 判断文件是否可读</span></code></pre><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-r</td><td>文件是否可读</td></tr><tr><td>-w</td><td>文件是否可写</td></tr><tr><td>-x</td><td>文件是否可执行</td></tr><tr><td>-s</td><td>是否为非空文件</td></tr></tbody></table><hr><p><strong>整数间的比较</strong><br>命令格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> <span class="token variable">$a</span> -eq <span class="token variable">$b</span>  <span class="token comment"># a是否等于b</span></code></pre><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-eq</td><td>a是否等于b</td></tr><tr><td>-ne</td><td>a是否不等于b</td></tr><tr><td>-gt</td><td>a是否大于b</td></tr><tr><td>-lt</td><td>a是否小于b</td></tr><tr><td>-ge</td><td>a是否大于等于b</td></tr><tr><td>-le</td><td>a是否小于等于b</td></tr></tbody></table><hr><p><strong>字符串比较</strong></p><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>test -z STRING</td><td>判断STRING是否为空，如果为空，则返回true</td></tr><tr><td>test -n STRING</td><td>判断STRING是否非空，如果非空，则返回true（-n可以省略）</td></tr><tr><td>test str1 == r2</td><td>判断str1是否等于str2</td></tr><tr><td>test str1 != tr2</td><td>判断str1是否不等于str2</td></tr></tbody></table><hr><p><strong>多重条件判定</strong><br>命令格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> -r filename -a -x filename</code></pre><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-a</td><td>两条件是否同时成立</td></tr><tr><td>-o</td><td>两条件是否至少一个成立</td></tr><tr><td>!</td><td>取反。如 test ! -x file，当file不可执行时，返回true</td></tr></tbody></table><hr><p><strong>判断符号[]</strong><br><code>[]</code>与<code>test</code>用法几乎一模一样，更常用于<code>if</code>语句中。另外<code>[[]]</code>是<code>[]</code>的加强版，支持的特性更多。</p><p>例如：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span> <span class="token number">2</span> -lt <span class="token number">3</span> <span class="token punctuation">]</span>  <span class="token comment"># 为真，返回值为0</span><span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 输出上个命令的返回值，输出0</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token function">ls</span>  <span class="token comment"># 列出当前目录下的所有文件</span>homework  output.txt  test.sh  tmpacs@9e0ebfcd82d7:~$ <span class="token punctuation">[</span> -e test.sh <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"exist"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Not exist"</span>exist  <span class="token comment"># test.sh 文件存在</span>acs@9e0ebfcd82d7:~$ <span class="token punctuation">[</span> -e test2.sh <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"exist"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Not exist"</span>Not exist  <span class="token comment"># testh2.sh 文件不存在</span></code></pre><p>注意：</p><ul><li><code>[]</code>内的每一项都要用空格隔开</li><li>中括号内的变量，最好用双引号括起来</li><li>中括号内的常数，最好用单或双引号括起来</li></ul><p>例如：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"acwing yxc"</span><span class="token punctuation">[</span> <span class="token variable">$name</span> <span class="token operator">==</span> <span class="token string">"acwing yxc"</span> <span class="token punctuation">]</span>  <span class="token comment"># 错误，等价于 [ acwing yxc == "acwing yxc" ]，参数太多</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$name</span>"</span> <span class="token operator">==</span> <span class="token string">"acwing yxc"</span> <span class="token punctuation">]</span>  <span class="token comment"># 正确</span></code></pre><h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><p><strong>if…then形式</strong><br>类似于<code>C/C++</code>中的<code>if-else</code>语句。</p><hr><p><strong>单层if</strong></p><p>命令格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> condition<span class="token keyword">then</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">fi</span></code></pre><p>示例：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$a</span>"</span> -lt <span class="token string">"<span class="token variable">$b</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$a</span>"</span> -gt <span class="token number">2</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>在范围内<span class="token keyword">fi</span></code></pre><p>输出结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">3</span>在范围内</code></pre><hr><p><strong>单层if-else</strong><br>命令格式</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> condition<span class="token keyword">then</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">else</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">fi</span></code></pre><p>示例：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$a</span>"</span> -lt <span class="token string">"<span class="token variable">$b</span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>不小于<span class="token variable">${b}</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>小于<span class="token variable">${b}</span><span class="token keyword">fi</span></code></pre><p>输出结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">3</span>小于4</code></pre><hr><p><strong>多层if-elif-elif-else</strong><br>命令格式</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> condition<span class="token keyword">then</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">elif</span> condition<span class="token keyword">then</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">elif</span> condition<span class="token keyword">then</span>    语句1    语句2<span class="token keyword">else</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">fi</span></code></pre><p>示例：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> -eq <span class="token number">1</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>等于1<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> -eq <span class="token number">2</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>等于2<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> -eq <span class="token number">3</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>等于3<span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> 其他<span class="token keyword">fi</span></code></pre><p>输出结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash">其他</code></pre><hr><p><strong>case…esac形式</strong><br>类似于<code>C/C++</code>中的<code>switch</code>语句。</p><p>命令格式</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">case</span> $变量名称 <span class="token keyword">in</span>    值1<span class="token punctuation">)</span>        语句1        语句2        <span class="token punctuation">..</span>.        <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment"># 类似于C/C++中的break</span>    值2<span class="token punctuation">)</span>        语句1        语句2        <span class="token punctuation">..</span>.        <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>  <span class="token comment"># 类似于C/C++中的default</span>        语句1        语句2        <span class="token punctuation">..</span>.        <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span></code></pre><p>示例：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">case</span> <span class="token variable">$a</span> <span class="token keyword">in</span>    <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>等于1        <span class="token punctuation">;</span><span class="token punctuation">;</span>      <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>等于2        <span class="token punctuation">;</span><span class="token punctuation">;</span>      <span class="token number">3</span><span class="token punctuation">)</span>                                                        <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>等于3        <span class="token punctuation">;</span><span class="token punctuation">;</span>      *<span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> 其他        <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">esac</span></code></pre><p>输出结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash">其他</code></pre><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p><strong>for…in…do…done</strong><br>命令格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">var</span> <span class="token keyword">in</span> val1 val2 val3<span class="token keyword">do</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">done</span></code></pre><p>示例1，输出a 2 cc，每个元素一行：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> a <span class="token number">2</span> cc<span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span></code></pre><p>示例2，输出当前路径下的所有文件名，每个文件名一行：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span><span class="token variable">`</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$file</span><span class="token keyword">done</span></code></pre><p>示例3，输出1-10</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">1</span> <span class="token number">10</span><span class="token variable">)</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span></code></pre><p>示例4，使用<code>{1..10} </code>或者 <code>{a..z}</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>a<span class="token punctuation">..</span>z<span class="token punctuation">}</span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span></code></pre><hr><p><strong>for ((…;…;…)) do…done</strong><br>命令格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>expression<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> expression<span class="token punctuation">))</span></span><span class="token keyword">do</span>    语句1    语句2<span class="token keyword">done</span></code></pre><p>示例，输出1-10，每个数占一行：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span></code></pre><hr><p><strong>while…do…done循环</strong><br>命令格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> condition<span class="token keyword">do</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">done</span></code></pre><p>示例，文件结束符为<code>Ctrl+d</code>，输入文件结束符后<code>read</code>指令返回false。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token builtin class-name">read</span> name<span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$name</span><span class="token keyword">done</span></code></pre><hr><p><strong>until…do…done循环</strong><br>当条件为真时结束。</p><p>命令格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">until</span> condition<span class="token keyword">do</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">done</span></code></pre><p>示例，当用户输入<code>yes</code>或者<code>YES</code>时结束，否则一直等待读入。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">until</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${word}</span>"</span> <span class="token operator">==</span> <span class="token string">"yes"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${word}</span>"</span> <span class="token operator">==</span> <span class="token string">"YES"</span> <span class="token punctuation">]</span><span class="token keyword">do</span>    <span class="token builtin class-name">read</span> -p <span class="token string">"Please input yes/YES to stop this program: "</span> word<span class="token keyword">done</span></code></pre><hr><p><strong>break命令</strong></p><p>跳出当前一层循环，注意与<code>C/C++</code>不同的是：<code>break</code>不能跳出<code>case</code>语句。</p><p>示例</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token builtin class-name">read</span> name<span class="token keyword">do</span>    <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>    <span class="token keyword">do</span>        <span class="token keyword">case</span> <span class="token variable">$i</span> <span class="token keyword">in</span>            <span class="token number">8</span><span class="token punctuation">)</span>                <span class="token builtin class-name">break</span>                <span class="token punctuation">;</span><span class="token punctuation">;</span>            *<span class="token punctuation">)</span>                <span class="token builtin class-name">echo</span> <span class="token variable">$i</span>                <span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">esac</span>    <span class="token keyword">done</span><span class="token keyword">done</span></code></pre><p>该示例每读入非EOF的字符串，会输出一遍1-7。<br>该程序可以输入<code>Ctrl+d</code>文件结束符来结束，也可以直接用<code>Ctrl+c</code>杀掉该进程。</p><hr><p><strong>continue命令</strong><br>跳出当前循环。</p><p>示例：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $i % <span class="token number">2</span><span class="token variable">`</span></span> -eq <span class="token number">0</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token builtin class-name">continue</span>    <span class="token keyword">fi</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span></code></pre><p>该程序输出1-10中的所有奇数。</p><p><strong>死循环的处理方式</strong><br>如果AC Terminal可以打开该程序，则输入<code>Ctrl+c</code>即可。</p><p>否则可以直接关闭进程：</p><ol><li>使用<code>top</code>命令找到进程的PID</li><li>输入<code>kill -9 PID</code>即可关掉此进程</li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><code>bash</code>中的函数类似于<code>C/C++</code>中的函数，但<code>return</code>的返回值与<code>C/C++</code>不同，返回的是<code>exit code</code>，取值为0-255，0表示正常结束。</p><p>如果想获取函数的输出结果，可以通过<code>echo</code>输出到<code>stdout</code>中，然后通过<code>$(function_name)</code>来获取<code>stdout</code>中的结果。</p><p>函数的<code>return</code>值可以通过<code>$?</code>来获取。</p><p>命令格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>function<span class="token punctuation">]</span> <span class="token function-name function">func_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment"># function关键字可以省略</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token punctuation">}</span></code></pre><hr><p><strong>不获取 <code>return</code>值和<code>stdout</code>值</strong></p><p>示例</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token assign-left variable">name</span><span class="token operator">=</span>yxc    <span class="token builtin class-name">echo</span> <span class="token string">"Hello <span class="token variable">$name</span>"</span><span class="token punctuation">}</span>func</code></pre><p>输出结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash">Hello yxc</code></pre><hr><p><strong>获取 <code>return</code>值和<code>stdout</code>值</strong><br>不写<code>return</code>时，默认<code>return 0</code>。</p><p>示例</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token assign-left variable">name</span><span class="token operator">=</span>yxc    <span class="token builtin class-name">echo</span> <span class="token string">"Hello <span class="token variable">$name</span>"</span>    <span class="token builtin class-name">return</span> <span class="token number">123</span><span class="token punctuation">}</span><span class="token assign-left variable">output</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>func<span class="token variable">)</span></span><span class="token assign-left variable">ret</span><span class="token operator">=</span><span class="token variable">$?</span><span class="token builtin class-name">echo</span> <span class="token string">"output = <span class="token variable">$output</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"return = <span class="token variable">$ret</span>"</span></code></pre><p>输出结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash">output <span class="token operator">=</span> Hello yxc<span class="token builtin class-name">return</span> <span class="token operator">=</span> <span class="token number">123</span></code></pre><p><strong>函数的输入参数</strong><br>在函数内，<code>$1</code>表示第一个输入参数，<code>$2</code>表示第二个输入参数，依此类推。</p><p>注意：函数内的<code>$0</code>仍然是文件名，而不是函数名。</p><p>示例：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment"># 递归计算 $1 + ($1 - 1) + ($1 - 2) + ... + 0</span>    <span class="token assign-left variable">word</span><span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${word}</span>"</span> <span class="token operator">!=</span> <span class="token string">'y'</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${word}</span>"</span> <span class="token operator">!=</span> <span class="token string">'n'</span> <span class="token punctuation">]</span>    <span class="token keyword">do</span>        <span class="token builtin class-name">read</span> -p <span class="token string">"要进入func(<span class="token variable">$1</span>)函数吗？请输入y/n："</span> word    <span class="token keyword">done</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$word</span>"</span> <span class="token operator">==</span> <span class="token string">'n'</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token number">0</span>        <span class="token builtin class-name">return</span> <span class="token number">0</span>    <span class="token keyword">fi</span>      <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> -le <span class="token number">0</span> <span class="token punctuation">]</span>     <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token number">0</span>        <span class="token builtin class-name">return</span> <span class="token number">0</span>    <span class="token keyword">fi</span>      <span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>func <span class="token punctuation">$(</span>expr $1 - <span class="token number">1</span><span class="token punctuation">)</span><span class="token variable">)</span></span>    <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> $sum + $1<span class="token variable">)</span></span><span class="token punctuation">}</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span>func <span class="token number">10</span><span class="token variable">)</span></span></code></pre><p>输出结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">55</span></code></pre><p><strong>函数内的局部变量</strong><br>可以在函数内定义局部变量，作用范围仅在当前函数内。</p><p>可以在递归函数中定义局部变量。</p><p>命令格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">local</span> 变量名<span class="token operator">=</span>变量值</code></pre><p>例如：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>yxc    <span class="token builtin class-name">echo</span> <span class="token variable">$name</span><span class="token punctuation">}</span>func<span class="token builtin class-name">echo</span> <span class="token variable">$name</span></code></pre><p>输出结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash">yxc</code></pre><p>第一行为函数内的name变量，第二行为函数外调用name变量，会发现此时该变量不存在。</p><h3 id="exit命令"><a href="#exit命令" class="headerlink" title="exit命令"></a>exit命令</h3><p><code>exit</code>命令用来退出当前<code>shell</code>进程，并返回一个退出状态；使用<code>$?</code>可以接收这个退出状态。</p><p><code>exit</code>命令可以接受一个整数值作为参数，代表退出状态。如果不指定，默认状态值是 0。</p><p><code>exit</code>退出状态只能是一个介于 0~255 之间的整数，其中只有 0 表示成功，其它值都表示失败。</p><hr><p>示例：</p><p>创建脚本<code>test.sh</code>，内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> -ne <span class="token number">1</span> <span class="token punctuation">]</span>  <span class="token comment"># 如果传入参数个数等于1，则正常退出；否则非正常退出。</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"arguments not valid"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"arguments valid"</span>    <span class="token builtin class-name">exit</span> <span class="token number">0</span><span class="token keyword">fi</span></code></pre><p>执行该脚本：</p><pre class="language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token function">chmod</span> +x test.sh acs@9e0ebfcd82d7:~$ ./test.sh acwingarguments validacs@9e0ebfcd82d7:~$ <span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 传入一个参数，则正常退出，exit code为0</span><span class="token number">0</span>acs@9e0ebfcd82d7:~$ ./test.sh arguments not validacs@9e0ebfcd82d7:~$ <span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 传入参数个数不是1，则非正常退出，exit code为1</span><span class="token number">1</span></code></pre><h3 id="文件重定向"><a href="#文件重定向" class="headerlink" title="文件重定向"></a>文件重定向</h3><p>每个进程默认打开3个文件描述符：</p><ul><li><p><code>stdin</code>标准输入，从命令行读取数据，文件描述符为0</p></li><li><p><code>stdout</code>标准输出，向命令行输出数据，文件描述符为1</p></li><li><p><code>stderr</code>标准错误输出，向命令行输出数据，文件描述符为2</p></li></ul><p>可以用文件重定向将这三个文件重定向到其他文件中。</p><hr><p><strong>重定向命令列表</strong></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>command &gt; file</code></td><td>将stdout重定向到file中</td></tr><tr><td><code>command &lt; file</code></td><td>将stdin重定向到file中</td></tr><tr><td><code>command &gt;&gt; file</code></td><td>将stdout以追加方式重定向到file中</td></tr><tr><td><code>command n&gt; file</code></td><td>将文件描述符n重定向到file中</td></tr><tr><td><code>command n&gt;&gt; file</code></td><td>将文件描述符n以追加方式重定向到file中</td></tr></tbody></table><hr><p><strong>输入和输出重定向</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> -e <span class="token string">"Hello <span class="token entity" title="\c">\c</span>"</span> <span class="token operator">&gt;</span> output.txt  <span class="token comment"># 将stdout重定向到output.txt中</span><span class="token builtin class-name">echo</span> <span class="token string">"World"</span> <span class="token operator">&gt;&gt;</span> output.txt  <span class="token comment"># 将字符串追加到output.txt中</span><span class="token builtin class-name">read</span> str <span class="token operator">&lt;</span> output.txt  <span class="token comment"># 从output.txt中读取字符串</span><span class="token builtin class-name">echo</span> <span class="token variable">$str</span>  <span class="token comment"># 输出结果：Hello World</span></code></pre><hr><p><strong>同时重定向stdin和stdout</strong><br>创建bash脚本：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">read</span> a<span class="token builtin class-name">read</span> b<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> <span class="token string">"<span class="token variable">$a</span>"</span> + <span class="token string">"<span class="token variable">$b</span>"</span><span class="token variable">)</span></span></code></pre><p>创建input.txt，里面的内容为：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">3</span><span class="token number">4</span></code></pre><p>执行命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token function">chmod</span> +x test.sh  <span class="token comment"># 添加可执行权限</span>acs@9e0ebfcd82d7:~$ ./test.sh <span class="token operator">&lt;</span> input.txt <span class="token operator">&gt;</span> output.txt  <span class="token comment"># 从input.txt中读取内容，将输出写入output.txt中</span>acs@9e0ebfcd82d7:~$ <span class="token function">cat</span> output.txt  <span class="token comment"># 查看output.txt中的内容</span><span class="token number">7</span></code></pre><h3 id="引入外部脚本"><a href="#引入外部脚本" class="headerlink" title="引入外部脚本"></a>引入外部脚本</h3><p>类似于<code>C/C++</code>中的<code>include</code>操作，<code>bash</code>也可以引入其他文件中的代码。</p><p>语法格式：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span> filename  <span class="token comment"># 注意点和文件名之间有一个空格</span>或<span class="token builtin class-name">source</span> filename</code></pre><p><strong>示例</strong><br>创建<code>test1.sh</code>，内容为：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">name</span><span class="token operator">=</span>yxc  <span class="token comment"># 定义变量name</span></code></pre><p>然后创建<code>test2.sh</code>，内容为：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">source</span> test1.sh <span class="token comment"># 或 . test1.sh</span><span class="token builtin class-name">echo</span> My name is: <span class="token variable">$name</span>  <span class="token comment"># 可以使用test1.sh中的变量</span></code></pre><p>执行命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token function">chmod</span> +x test2.sh acs@9e0ebfcd82d7:~$ ./test2.sh My name is: yxc</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h3 id=&quot;概论&quot;&gt;&lt;a href=&quot;#概论&quot; class=&quot;headerlink&quot; title=&quot;概论&quot;&gt;&lt;/a&gt;概论&lt;/h3&gt;&lt;p&gt;shell是我们通过命令行与操作系统沟通的语言。&lt;/p&gt;
&lt;p&gt;shell脚本可以直接在命令行中执行，也可以将一套</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://sun-hailong.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="http://sun-hailong.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux-tmux和vim</title>
    <link href="http://sun-hailong.github.io/2022/01/27/linux-tmux-he-vim/"/>
    <id>http://sun-hailong.github.io/2022/01/27/linux-tmux-he-vim/</id>
    <published>2022-01-27T04:04:10.364Z</published>
    <updated>2022-01-27T04:05:30.935Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tmux和vim"><a href="#tmux和vim" class="headerlink" title="tmux和vim"></a>tmux和vim</h2><h3 id="1-tmux"><a href="#1-tmux" class="headerlink" title="1. tmux"></a>1. tmux</h3><pre class="language-bash" data-language="bash"><code class="language-bash">功能：    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 分屏。    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 允许断开Terminal连接后，继续运行进程。结构：    一个tmux可以包含多个session，一个session可以包含多个window，一个window可以包含多个pane。    实例：        tmux:            session <span class="token number">0</span>:                window <span class="token number">0</span>:                    pane <span class="token number">0</span>                    pane <span class="token number">1</span>                    pane <span class="token number">2</span>                    <span class="token punctuation">..</span>.                window <span class="token number">1</span>                window <span class="token number">2</span>                <span class="token punctuation">..</span>.            session <span class="token number">1</span>            session <span class="token number">2</span>            <span class="token punctuation">..</span>.操作：    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> tmux：新建一个session，其中包含一个window，window中包含一个pane，pane里打开了一个shell对话框。    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 按下Ctrl + a后手指松开，然后按%：将当前pane左右平分成两个pane。    <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 按下Ctrl + a后手指松开，然后按<span class="token string">"（注意是双引号"</span>）：将当前pane上下平分成两个pane。    <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> Ctrl + d：关闭当前pane；如果当前window的所有pane均已关闭，则自动关闭window；如果当前session的所有window均已关闭，则自动关闭session。    <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> 鼠标点击可以选pane。    <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> 按下ctrl + a后手指松开，然后按方向键：选择相邻的pane。    <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> 鼠标拖动pane之间的分割线，可以调整分割线的位置。    <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> 按住ctrl + a的同时按方向键，可以调整pane之间分割线的位置。    <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> 按下ctrl + a后手指松开，然后按z：将当前pane全屏/取消全屏。    <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> 按下ctrl + a后手指松开，然后按d：挂起当前session。    <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> tmux a：打开之前挂起的session。    <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> 按下ctrl + a后手指松开，然后按s：选择其它session。        方向键 —— 上：选择上一项 session/window/pane        方向键 —— 下：选择下一项 session/window/pane        方向键 —— 右：展开当前项 session/window        方向键 —— 左：闭合当前项 session/window    <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> 按下Ctrl + a后手指松开，然后按c：在当前session中创建一个新的window。    <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> 按下Ctrl + a后手指松开，然后按w：选择其他window，操作方法与<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>完全相同。    <span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> 按下Ctrl + a后手指松开，然后按PageUp：翻阅当前pane内的内容。    <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> 鼠标滚轮：翻阅当前pane内的内容。    <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span> 在tmux中选中文本时，需要按住shift键。（仅支持Windows和Linux，不支持Mac，不过该操作并不是必须的，因此影响不大）    <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> tmux中复制/粘贴文本的通用方式：        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 按下Ctrl + a后松开手指，然后按<span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板        <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 按下Ctrl + a后松开手指，然后按<span class="token punctuation">]</span>，会将剪贴板中的内容粘贴到光标处</code></pre><h3 id="2-vim"><a href="#2-vim" class="headerlink" title="2. vim"></a>2. vim</h3><pre class="language-bash" data-language="bash"><code class="language-bash">功能：    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 命令行模式下的文本编辑器。    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 根据文件扩展名自动判别编程语言。支持代码缩进、代码高亮等功能。    <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 使用方式：vim filename        如果已有该文件，则打开它。        如果没有该文件，则打开个一个新的文件，并命名为filename模式：    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 一般命令模式        默认模式。命令输入方式：类似于打游戏放技能，按不同字符，即可进行不同操作。可以复制、粘贴、删除文本等。    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 编辑模式        在一般命令模式里按下i，会进入编辑模式。        按下ESC会退出编辑模式，返回到一般命令模式。    <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 命令行模式        在一般命令模式里按下:/?三个字母中的任意一个，会进入命令行模式。命令行在最下面。        可以查找、替换、保存、退出、配置编辑器等。操作：    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> i：进入编辑模式    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> ESC：进入一般命令模式    <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> h 或 左箭头键：光标向左移动一个字符    <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> j 或 向下箭头：光标向下移动一个字符    <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> k 或 向上箭头：光标向上移动一个字符    <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> l 或 向右箭头：光标向右移动一个字符    <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> n<span class="token operator">&lt;</span>Space<span class="token operator">&gt;</span>：n表示数字，按下数字后再按空格，光标会向右移动这一行的n个字符    <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token number">0</span> 或 功能键<span class="token punctuation">[</span>Home<span class="token punctuation">]</span>：光标移动到本行开头    <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> $ 或 功能键<span class="token punctuation">[</span>End<span class="token punctuation">]</span>：光标移动到本行末尾    <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> G：光标移动到最后一行    <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> :n 或 nG：n为数字，光标移动到第n行    <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> gg：光标移动到第一行，相当于1G    <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> n<span class="token operator">&lt;</span>Enter<span class="token operator">&gt;</span>：n为数字，光标向下移动n行    <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> /word：向光标之下寻找第一个值为word的字符串。    <span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> ?word：向光标之上寻找第一个值为word的字符串。    <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> n：重复前一个查找操作    <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span> N：反向重复前一个查找操作    <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> :n1,n2s/word1/word2/g：n1与n2为数字，在第n1行与n2行之间寻找word1这个字符串，并将该字符串替换为word2    <span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span> :1,<span class="token variable">$s</span>/word1/word2/g：将全文的word1替换为word2    <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> :1,<span class="token variable">$s</span>/word1/word2/gc：将全文的word1替换为word2，且在替换前要求用户确认。    <span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> v：选中文本    <span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span> d：删除选中的文本    <span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span> dd: 删除当前行    <span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> y：复制选中的文本    <span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> yy: 复制当前行    <span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span> p: 将复制的数据在光标的下一行/下一个位置粘贴    <span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span> u：撤销    <span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span> Ctrl + r：取消撤销    <span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span> 大于号 <span class="token operator">&gt;</span>：将选中的文本整体向右缩进一次    <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> 小于号 <span class="token operator">&lt;</span>：将选中的文本整体向左缩进一次    <span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span> :w 保存    <span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> :w<span class="token operator">!</span> 强制保存    <span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span> :q 退出    <span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span> :q<span class="token operator">!</span> 强制退出    <span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span> :wq 保存并退出    <span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> :set <span class="token function">paste</span> 设置成粘贴模式，取消代码自动缩进    <span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span> :set nopaste 取消粘贴模式，开启代码自动缩进    <span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">)</span> :set nu 显示行号    <span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span> :set nonu 隐藏行号    <span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token assign-left variable">gg</span><span class="token operator">=</span>G：将全文代码格式化    <span class="token punctuation">(</span><span class="token number">41</span><span class="token punctuation">)</span> :noh 关闭查找关键词高亮    <span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span> Ctrl + q：当vim卡死时，可以取消当前正在执行的命令异常处理：    每次用vim编辑文件时，会自动创建一个.filename.swp的临时文件。    如果打开某个文件时，该文件的swp文件已存在，则会报错。此时解决办法有两种：        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 找到正在打开该文件的程序，并退出        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 直接删掉该swp文件即可</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;tmux和vim&quot;&gt;&lt;a href=&quot;#tmux和vim&quot; class=&quot;headerlink&quot; title=&quot;tmux和vim&quot;&gt;&lt;/a&gt;tmux和vim&lt;/h2&gt;&lt;h3 id=&quot;1-tmux&quot;&gt;&lt;a href=&quot;#1-tmux&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://sun-hailong.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="http://sun-hailong.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>用随机梯度下降来优化人生</title>
    <link href="http://sun-hailong.github.io/2021/11/25/yong-sui-ji-ti-du-xia-jiang-lai-you-hua-ren-sheng/"/>
    <id>http://sun-hailong.github.io/2021/11/25/yong-sui-ji-ti-du-xia-jiang-lai-you-hua-ren-sheng/</id>
    <published>2021-11-25T10:15:59.566Z</published>
    <updated>2021-11-25T10:20:35.592Z</updated>
    
    <content type="html"><![CDATA[<p><strong>要有目标。</strong>你需要有目标。短的也好，长的也好。认真定下的也好，别人那里捡的也好。就跟随机梯度下降需要有个目标函数一样。</p><p><strong>目标要大。</strong>不管是人生目标还是目标函数，你最好不要知道最后可以走到哪里。如果你知道，那么你的目标就太简单了，可能是个凸函数。你可以在一开始的时候给自己一些小目标，例如期末考个80分，训练一个线性模型。但接下来得有更大的目标，财富自由也好，100亿参数的变形金刚也好，得足够一颗赛艇。</p><p><strong>坚持走。</strong>不管你的目标多复杂，随机梯度下降都是最简单的。每一次你找一个大概还行的方向（梯度），然后迈一步（下降）。两个核心要素是方向和步子的长短。但最重要的是你得一直走下去，能多走几步就多走几步。</p><p><strong>痛苦的卷。</strong>每一步里你都在试图改变你自己或者你的模型参数。改变带来痛苦。但没有改变就没有进步。你过得很痛苦不代表在朝着目标走，因为你可能走反了。但过得很舒服那一定在原地踏步。需要时刻跟自己作对。</p><p><strong>可以躺平。</strong>你用你内心的激情来迈步子。步子太小走不动，步子太长容易过早消耗掉了激情。周期性的调大调小步长效果挺好。所以你可以时不时休息休息。</p><p><strong>四处看看。</strong>每一步走的方向是你对世界的认识。如果你探索的世界不怎么变化，那么要么你的目标太简单，要么你困在你的舒适区了。随机梯度下降的第一个词是随机，就是你需要四处走走，看过很多地方，做些错误的决定，这样你可以在前期迈过一些不是很好的舒适区。</p><p><strong>快也是慢。</strong>你没有必要特意去追求找到最好的方向和最合适的步子。你身边当然会有幸运之子，他们每一步都在别人前面。但经验告诉我们，随机梯度下降前期进度太快，后期可能乏力。就是说你过早的找到一个舒适区，忘了世界有多大。所以你不要急，前面徘徊一段时间不是坏事。成名无需太早。</p><p><strong>赢在起点。</strong>起点当然重要。如果你在终点附近起步，可以少走很多路。而且终点附近的路都比较平，走着舒服。当你发现别人不如你的时候，看看自己站在哪里。可能你就是运气很好，赢在了起跑线。如果你跟别人在同一起跑线，不见得你能做更好。</p><p><strong>很远也能到达。</strong>如果你是在随机起点，那么做好准备前面的路会非常不平坦。越远离终点，越人迹罕见。四处都是悬崖。但随机梯度下降告诉我们，不管起点在哪里，最后得到的解都差不多。当然这个前提是你得一直按照梯度的方向走下去。如果中间梯度炸掉了，那么你随机一个起点，调整步子节奏，重新来。</p><p><strong>独一无二。</strong>也许大家有着差不多的目标，在差不多的时间毕业买房结婚生娃。但每一步里，每个人内心中看到的世界都不一样，导致走的路不一样。你如果跑多次随机梯度下降，在各个时间点的目标函数值可能都差不多，但每次的参数千差万别。不会有人关心你每次训练出来的模型里面参数具体是什么值，除了你自己。</p><p><strong>简单最好 。</strong>当然有比随机梯度下降更复杂的算法。他们想每一步看想更远更准，想步子迈最大。但如果你的目标很复杂，简单的随机梯度下降反而效果最好。深度学习里大家都用它。关注当前，每次抬头瞄一眼世界，快速做个决定，然后迈一小步。小步快跑。只要你有目标，不要停，就能到达。 </p><p>作者：跟李沐学AI <a href="https://www.bilibili.com/read/cv13335461?spm_id_from=333.999.0.0">https://www.bilibili.com/read/cv13335461?spm_id_from=333.999.0.0</a> 出处：bilibili</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;要有目标。&lt;/strong&gt;你需要有目标。短的也好，长的也好。认真定下的也好，别人那里捡的也好。就跟随机梯度下降需要有个目标函数一样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目标要大。&lt;/strong&gt;不管是人生目标还是目标函数，你最好不要知道最后可以走到哪里。如果</summary>
      
    
    
    
    <category term="生活" scheme="http://sun-hailong.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="http://sun-hailong.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>算法模板</title>
    <link href="http://sun-hailong.github.io/2021/11/17/suan-fa-ban-zi/"/>
    <id>http://sun-hailong.github.io/2021/11/17/suan-fa-ban-zi/</id>
    <published>2021-11-17T10:22:22.535Z</published>
    <updated>2022-03-04T11:50:12.077Z</updated>
    
    <content type="html"><![CDATA[<p><strong>数据范围：</strong></p><p>一般ACM或者笔试题的时间限制是1秒或2秒。</p><p>在这种情况下，C++代码中的操作次数控制在 $10^7 \sim 10^8$ 为最佳。</p><p>下面给出在不同数据范围下，代码的时间复杂度和算法该如何选择：</p><ol><li>$n \le 30$, 指数级别, dfs+剪枝，状态压缩dp</li><li>$n \le 100$ =&gt; $O(n^3)$，floyd，dp，高斯消元</li><li>$n \le 1000$ =&gt; $O(n^2)$，$O(n^2logn)$，dp，二分，朴素版Dijkstra、朴素版Prim、Bellman-Ford</li><li>$n \le 10000$ =&gt; $O(n * \sqrt n)$，块状链表、分块、莫队</li><li>$n \le 100000$ =&gt; $O(nlogn)$ =&gt; 各种sort，线段树、树状数组、set/map、heap、拓扑排5序、dijkstra+heap、prim+heap、spfa、求凸包、求半平面交、二分、CDQ分治、整体二分</li><li>$n \le 1000000$ =&gt; $O(n)$, 以及常数较小的 $O(nlogn)$ 算法 =&gt; 单调队列、 hash、双指针扫描、并查集，kmp、AC自动机，常数比较小的 $O(nlogn)$ 的做法：sort、树状数组、heap、dijkstra、spfa</li><li>$n \le 10000000$ =&gt; $O(n)$，双指针扫描、kmp、AC自动机、线性筛素数</li><li>$n \le 10^9$ =&gt; $O(\sqrt n)$，判断质数</li><li>$n \le 10^{18}$ =&gt; $O(logn)$，最大公约数，快速幂</li><li>$n \le 10^{1000}$ =&gt; $O((logn)^2)$，高精度加减乘除</li><li>$n \le 10^{100000}$ =&gt; $O(logk \times loglogk)，k表示位数$，高精度加减、FFT/NTT</li></ol><h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">=</span> q<span class="token punctuation">[</span>l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">do</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> j<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> l<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><p><strong>使用前提：</strong>一个题目,如果一个区间具有单调性质,那么一定可以二分,但是如果说这道题目没有单调性质,而是具有某种区间性质的话,我们同样可以使用二分.</p><ol><li>找到&gt;=x的第一个数</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//注意mid = l+r 还是l+r+1 !!!</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> x<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>找到&lt;x的</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>浮点数二分</li></ol><p>浮点数二分不用考虑边界问题;<br>但是mid只能写成mid = (l + r) / 2，而mid = l + r &gt;&gt; 1会报错</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/* 数的三次方根 */</span><span class="token keyword">double</span> epi <span class="token operator">=</span> <span class="token number">1e-7</span><span class="token punctuation">;</span><span class="token keyword">double</span> mid<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&gt;</span> epi<span class="token punctuation">)</span><span class="token punctuation">{</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">*</span> mid <span class="token operator">*</span> mid <span class="token operator">&gt;</span> n<span class="token punctuation">)</span>        r <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token keyword">else</span>         l <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>使用<strong>STL库</strong>函数</li></ol><p><code>lower_bound( begin,end,num)</code>：查找第一个<strong>大于或等于</strong>num的数字，通过返回的地址<strong>减去起始地址begin</strong>,得到找到数字在数组中的下标。</p><p><code>upper_bound( begin,end,num)</code>：查找第一个<strong>大于</strong>num的数字，通过返回的地址<strong>减去起始地址begin</strong>,得到找到数字在数组中的下标。</p><h3 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h3><ol><li>高精度加法</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>using namespace std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">add</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//进位</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">+=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//如果最后一位产生进位</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> A<span class="token punctuation">,</span> B<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    <span class="token comment">//低位在前，高位在后</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> C <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>高精度减法</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//C = A - B</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">sub</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//借位</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> t<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">-=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//去掉前导0</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> A<span class="token punctuation">,</span> B<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>        <span class="token keyword">auto</span> C <span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>        <span class="token punctuation">{</span>        <span class="token keyword">auto</span> C <span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>高精度乘法</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">mul</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string a<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> A<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> C <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>高精度除法</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">div</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        r <span class="token operator">=</span> r <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>r <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">%=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> C<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string a<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> r<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> A<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> C <span class="token operator">=</span> <span class="token function">div</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> b<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="前缀和与差分"><a href="#前缀和与差分" class="headerlink" title="前缀和与差分"></a>前缀和与差分</h3><ol><li>一维前缀和与差分</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//求前缀和</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//求[l,r]的区间和</span>s<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//构造差分数组</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//[l,r]每个数加c</span>b<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span>b<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span><span class="token comment">//还原成原数组</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>二维前缀和与差分</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//求前缀和</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token comment">//求[x1,y1]与[x2,y2]之间的和</span>S <span class="token operator">=</span> s<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>x1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>x1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//构造差分数组</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//选中的子矩阵中的每个元素的值加上c</span>a<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span>a<span class="token punctuation">[</span>x2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span>a<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span>a<span class="token punctuation">[</span>x2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span><span class="token comment">//还原成原数组</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//求出满足 A[i]+B[j]=x 的数对 (i,j)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> x<span class="token punctuation">)</span>    j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token comment">// 每次截取一个数字最后一个1后面的所有位</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token operator">-</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h3><p>主要分为5大步：</p><ol><li>读输入。将每次读入的x,c push_back()到add中，将每次读入的位置x push_back()到alls中，将每次读入的l r push_back()到query中。</li><li>排序、去重。</li><li>通过遍历add，完成在离散化的数组映射到的a数组中进行加上c的操作（用到find函数）。</li><li>初始化s数组。</li><li>通过遍历query，完成求区间[l,r]的和。</li></ol><p>将所有要用到的下标存放在alls数组里面<br>排序好了之后，查找出某一位置x在alls里面对应的下标，并返回下标加一（便于前缀和）<br>然后a[x] += c，再进行前缀和操作<br>最后遍历query，利用find函数找出左右下标，然后利用s[r] - s[l - 1]进行输出！</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">300010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> alls<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> add<span class="token punctuation">,</span> query<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> alls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>alls<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> x<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>        add<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span> c<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将所有要用到的下标存放在alls数组里面</span>        alls<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span>        query<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span> r<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        alls<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        alls<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//对所有下标进行排序</span>    <span class="token function">sort</span><span class="token punctuation">(</span>alls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//进行去重</span>    alls<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>alls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> item <span class="token operator">:</span> add<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//寻找下标</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> item<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//处理前缀和</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> alls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> item <span class="token operator">:</span> query<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h3><p>对左端点进行排序！！</p><pre class="language-c" data-language="c"><code class="language-c">vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> segs<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>segs<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> res<span class="token punctuation">;</span>    <span class="token comment">//按左端点排序</span>    <span class="token function">sort</span><span class="token punctuation">(</span>segs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> segs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> st <span class="token operator">=</span> segs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span> ed <span class="token operator">=</span> segs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> segs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//无法合并则将之前的区间放入答案中</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ed <span class="token operator">&lt;</span> segs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>st<span class="token punctuation">,</span> ed<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将下一个区间的端点重置</span>            st <span class="token operator">=</span> segs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>            ed <span class="token operator">=</span> segs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//能合并的情况</span>        <span class="token keyword">else</span> ed <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ed<span class="token punctuation">,</span> segs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将最后一个区间放入答案中</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">==</span> segs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>st<span class="token punctuation">,</span> ed<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    segs <span class="token operator">=</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//题意：给定一个长度为 N 的整数数列，输出每个数左边第一个比它小的数，如果不存在则输出 −1</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> stk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> tt<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>tt <span class="token operator">&amp;&amp;</span> stk<span class="token punctuation">[</span>tt<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> x<span class="token punctuation">)</span> tt<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> stk<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stk<span class="token punctuation">[</span><span class="token operator">++</span> tt<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//滑动窗口：确定滑动窗口位于每个位置时，窗口中的最小值</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1000010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token comment">//a[N]存的是所有值，q[N]存的是有单调性的数的下标</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//队首滑出窗口</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">)</span> hh<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">//使队尾具有单调性</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> tt<span class="token operator">--</span><span class="token punctuation">;</span>        q<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/*给定一个模式串 S，以及一个模板串 P，所有字符串中只包含大小写英文字母以及阿拉伯数字。模板串 P 在模式串 S 中多次作为子串出现。求出模板串 P 在模式串 S 中所有出现的位置的起始下标。*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">1000010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">char</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> p <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//求next数组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>        ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//匹配</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">//匹配成功</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> n<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">-</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>  <span class="token comment">//并查集</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token comment">//带权并查集 </span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> d<span class="token punctuation">[</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1000010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> q<span class="token punctuation">;</span>LL tr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token operator">-</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//1、单点加，区间求和     单点修改：O(logn) 区间查询：O(logn)</span><span class="token comment">//2、用差分可以变化为区间加，求单点值 </span><span class="token comment">//3、区间加（差分），区间求和维（护两个前缀和(bi和i*bi）公式为：(a1+..+ax)=(x+1) * (b1+...+bx)-(1*b1+2*b2+..x*bx)</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> tr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span>LL <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    LL res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> tr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>q <span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> op<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> op <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token function">sum</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">sum</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1000010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    LL sum<span class="token punctuation">,</span> add<span class="token punctuation">;</span>    <span class="token comment">// TODO: 需要维护的信息和懒标记</span><span class="token punctuation">}</span>tr<span class="token punctuation">[</span>N <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//单点修改，区间查询</span> <span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token comment">//u为根节点</span><span class="token punctuation">{</span>    tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    <span class="token comment">// TODO: 利用左右儿子信息维护当前节点的信息</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">pushdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> <span class="token operator">&amp;</span>root <span class="token operator">=</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>left <span class="token operator">=</span> tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>right <span class="token operator">=</span> tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>add<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        left<span class="token punctuation">.</span>add <span class="token operator">+=</span> root<span class="token punctuation">.</span>add<span class="token punctuation">,</span> left<span class="token punctuation">.</span>sum <span class="token operator">+=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>r <span class="token operator">-</span> left<span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> root<span class="token punctuation">.</span>add<span class="token punctuation">;</span>        right<span class="token punctuation">.</span>add <span class="token operator">+=</span> root<span class="token punctuation">.</span>add<span class="token punctuation">,</span> right<span class="token punctuation">.</span>sum <span class="token operator">+=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>r <span class="token operator">-</span> right<span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> root<span class="token punctuation">.</span>add<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// TODO: 将懒标记下传</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token comment">//建树</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> w<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>l<span class="token punctuation">,</span> r<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">build</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// void update(int u, int pos, int val)// 单点修改</span><span class="token comment">// {</span><span class="token comment">//     if(tr[u].l == pos &amp;&amp; tr[u].r == pos) tr[u].v = val;</span><span class="token comment">//     else</span><span class="token comment">//     {</span><span class="token comment">//         int mid = tr[u].l + tr[u].r &gt;&gt; 1;</span><span class="token comment">//         if(pos &lt;= mid) </span><span class="token comment">//             update(u &lt;&lt; 1, pos, val);</span><span class="token comment">//         else </span><span class="token comment">//             update(u &lt;&lt; 1 | 1, pos, val);</span><span class="token comment">//         pushup(u);</span><span class="token comment">//     }</span><span class="token comment">// }</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token comment">//区间修改</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&gt;=</span> l <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> d<span class="token punctuation">;</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>add <span class="token operator">+=</span> d<span class="token punctuation">;</span>        <span class="token comment">// TODO: 修改区间</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">pushdown</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>LL <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&gt;=</span> l <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>          <span class="token comment">// TODO 需要补充返回值</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">pushdown</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        LL res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid <span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span> res <span class="token operator">+=</span> <span class="token function">query</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> op<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h3><p>主要用来解决<strong>RMQ</strong>（Range Maximum/Minimum Query，<strong>区间最大/最小值查询</strong>）问题。它主要应用<strong>倍增</strong>的思想，可以实现 $O(nlogn)$预处理、$O(1)$查询。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">200010</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//max</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//min</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>j<span class="token punctuation">)</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span>   <span class="token keyword">int</span> <span class="token function">query_max</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">log</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query_min</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token function">log</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">query_max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">query_min</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="搜索与图论"><a href="#搜索与图论" class="headerlink" title="搜索与图论"></a>搜索与图论</h2><p>最短路算法分为两大类：</p><p>单源最短路，常用算法有：<br>(1) dijkstra，只有所有边的<strong>权值为正</strong>时才可以使用。在稠密图上的时间复杂度是 O($n^{2}$)，稀疏图上的时间复杂度是 O($mlogn$)。<br>(2) spfa，<strong>不论边权是正的还是负的</strong>，都可以做。算法平均时间复杂度是 O($km$)O($km$)，k 是常数。 强烈推荐该算法。<br>多源最短路，一般用floyd算法。代码很短，三重循环，时间复杂度是 O($n^{3}$)。</p><p><strong>最大值：</strong><code>INF = 0x3f3f3f3f;</code></p><p><strong>初始化：</strong><code>memset(d, 0x3f, sizeof d);</code></p><h3 id="迪杰斯特拉"><a href="#迪杰斯特拉" class="headerlink" title="迪杰斯特拉"></a>迪杰斯特拉</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2510</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">6210</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>M <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>M <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span> <span class="token comment">// 邻接表存储所有边</span>bool st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 存储每个点的最短距离是否已确定</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 存储所有点到1号点的距离</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">// 求u号点到n号点的最短距离，如果不存在，则返回-1</span><span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>PII<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>PII<span class="token operator">&gt;&gt;</span> heap<span class="token punctuation">;</span>    heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> u<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// first存储距离，second存储节点编号</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">auto</span> t <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ver <span class="token operator">=</span> t<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        st<span class="token punctuation">[</span>ver<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> d<span class="token punctuation">[</span>ver<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>ver<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这一步很关键！！！！！！！！！！！！！！</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无向图则多添加一条反向边！！！</span>    <span class="token punctuation">}</span>    <span class="token function">dijkstra</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="spfa"><a href="#spfa" class="headerlink" title="spfa"></a>spfa</h3><p>$bellman-ford$算法的优化版本，可以处理存在<strong>负边权</strong>的最短路问题。</p><p>最坏情况下的时间复杂度是 $O(nm)$，但实践证明$spfa$算法的运行效率非常高，期望运行时间是 $O(km)$，其中 $k $是常数。<br>但需要注意的是，在网格图中，$spfa$算法的效率比较低，如果<strong>边权为正</strong>，则尽量使用 $dijkstra$算法。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">50010</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">150010</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span>  <span class="token comment">// 添加一条边a-&gt;b，边权为c</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>    d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> d<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50001</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>        a<span class="token operator">++</span><span class="token punctuation">,</span> b<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">[</span><span class="token number">50001</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h3><p>标准弗洛伊德算法，三重循环。循环结束之后存储$d[i][j]$的就是点$i$到点$j$的最短距离。<br>需要注意循环顺序不能变：第一层枚举中间点，第二层和第三层枚举起点和终点。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// floyd 算法核心</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="树上差分"><a href="#树上差分" class="headerlink" title="树上差分"></a>树上差分</h3><p>99%情况下与<code>LCA</code>(最近公共祖先)一起出现</p><p>树上差分，准确来说不是算法，而是一种优秀的思想。是一个适用于树上区间操作的算法，它是差分数组，前缀和求解的树上拓展.</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">50010</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> N<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">int</span> depth<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> fa<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>  <span class="token comment">// 添加一条边a-&gt;b</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> depth<span class="token punctuation">)</span><span class="token punctuation">;</span>    depth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> depth<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">[</span>hh<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>depth<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> depth<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                depth<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> depth<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                q<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                fa<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                    fa<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">[</span>fa<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">lca</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>depth<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">&lt;</span> depth<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> k <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>depth<span class="token punctuation">[</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> depth<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>            a <span class="token operator">=</span> fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> k <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> fa<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            a <span class="token operator">=</span> fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> fa<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> from<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> from<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+=</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">lca</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>fa<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//printf("d[%d]:%d\n", i, d[i]);</span>        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>首先遍历一遍图，找出入度为0的点，把它push到队列中去，然后把这个点延伸出来的边都去除掉，（d[指向的点]–），最后判断ans数组是否大小为n，不为n则输出-1；</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">topsort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//stl的queue</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//记录拓扑序</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> n <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h3><p>解决二分图的最大匹配问题</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">210</span><span class="token punctuation">,</span> M <span class="token operator">=</span> N <span class="token operator">*</span> N<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">int</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> match<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>  <span class="token comment">// 添加一条边a-&gt;b</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">find</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                match<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>                <span class="token keyword">return</span> true<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>match<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> match<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> cnt<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>cnt<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> x<span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">memset</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> st<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> res<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h3><p>求最小生成树</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Edge</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> w<span class="token punctuation">;</span><span class="token comment">//a-&gt;b，边权为w</span>    bool operator<span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Edge <span class="token operator">&amp;</span>tmp<span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> w <span class="token operator">&lt;</span> tmp<span class="token punctuation">.</span>w<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>edges<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">kruskal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">sort</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span> edges <span class="token operator">+</span> m<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">,</span> w <span class="token operator">=</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>            res <span class="token operator">+=</span> w<span class="token punctuation">;</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> INF<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h3><p>求最小生成树</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">prim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> d<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&gt;</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                t <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> INF<span class="token punctuation">)</span> <span class="token keyword">return</span> INF<span class="token punctuation">;</span>        res <span class="token operator">+=</span> d<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="BFS与DFS"><a href="#BFS与DFS" class="headerlink" title="BFS与DFS"></a>BFS与DFS</h3><p>$BFS$与$DFS$的大致模板写法</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> d<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token comment">//按照字典序将所有的1~n的排列方法输出</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h2><h3 id="线性筛质数"><a href="#线性筛质数" class="headerlink" title="线性筛质数"></a>线性筛质数</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">get_primes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>  <span class="token comment">// 线性筛质数</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> primes<span class="token punctuation">[</span>cnt <span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            st<span class="token punctuation">[</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><pre class="language-c" data-language="c"><code class="language-c">LL <span class="token function">qmi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    LL res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>res <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>a <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>        k <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>  <span class="token comment">// 求最大公约数</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> b <span class="token operator">?</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="求组合数"><a href="#求组合数" class="headerlink" title="求组合数"></a>求组合数</h3><p>版本1：</p><p>公式：$C^b_a=C^{b-1}<em>{a-1}+C^b</em>{a-1}$</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>j<span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>版本2：</p><p>费马小定理：a^(p-1) ≡1(mod p)</p><p>当b与m互质时，b的乘法逆元为b^(m-2)</p><p>公式：$C^b_a=\frac{a!}{b!(a−b)!}=a! \ast b!^{-1} \ast (a-b)!^{-1}$</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fact<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>fact<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> i <span class="token operator">%</span> mod<span class="token punctuation">;</span>    infact<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>infact<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">qmi</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>fact<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">*</span> infact<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">%</span> mod <span class="token operator">*</span> infact<span class="token punctuation">[</span>a <span class="token operator">-</span> b<span class="token punctuation">]</span> <span class="token operator">%</span> mod <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>版本3：</p><p>$Lucas$定理：$C_{a}^{b} \equiv C_{a % p}^{b % p} * C_{\frac{a}{p}}^{\frac{b}{p}}(mod\ p)$</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&gt;</span> a<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    LL res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        res <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>res <span class="token operator">*</span> j <span class="token operator">%</span> p<span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>res <span class="token operator">*</span> <span class="token function">qmi</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">lucas</span><span class="token punctuation">(</span>LL a<span class="token punctuation">,</span> LL b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> p <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;</span> p<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">C</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span><span class="token function">C</span><span class="token punctuation">(</span>a <span class="token operator">%</span> p<span class="token punctuation">,</span> b <span class="token operator">%</span> p<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">lucas</span><span class="token punctuation">(</span>a <span class="token operator">/</span> p<span class="token punctuation">,</span> b <span class="token operator">/</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h3><p>n表示物体数量，m表示背包总体积</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//二维形式</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>   f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//一维形式</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h3><p>一维形式版本</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>二进制优化版本</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//利用二进制分解</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> s<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> s<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>        v<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> a <span class="token operator">*</span> k<span class="token punctuation">;</span>        w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> b <span class="token operator">*</span> k<span class="token punctuation">;</span>        s <span class="token operator">-=</span> k<span class="token punctuation">;</span>        k <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cnt <span class="token operator">++</span><span class="token punctuation">;</span>        v<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> a <span class="token operator">*</span> s<span class="token punctuation">;</span>        w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> b <span class="token operator">*</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>n <span class="token operator">=</span> cnt<span class="token punctuation">;</span><span class="token comment">//然后按照01背包问题求解</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h3><p>$S_i$表示第$i$组物品组的物品个数</p><p>$v_{ij}$表示物体的体积，$i$表示组号，$j$表示组内编号</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h3><p>$dp$做法</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>贪心做法</p><pre class="language-c" data-language="c"><code class="language-c">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> stk<span class="token punctuation">;</span><span class="token comment">//模拟堆栈</span><span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stk<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> x<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    stk<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token function">arr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    stk<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> stk<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果该元素大于栈顶元素,将该元素入栈</span>            stk<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token comment">//替换掉第一个大于或者等于这个数字的那个数</span>            <span class="token function">change</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> stk<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="区间dp"><a href="#区间dp" class="headerlink" title="区间dp"></a>区间dp</h3><p>所有的区间$dp$问题，第一维都是枚举区间长度，一般 $len = 1$ 用来初始化，枚举从$len = 2$开始，第二维枚举起点 $i$（右端点 j 自动获得，$j = i + len - 1$）</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//前缀和</span>    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 区间 DP 枚举套路：长度+左端点 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">// len表示i和j堆下标的差值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> i<span class="token punctuation">,</span> r <span class="token operator">=</span> i <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 自动得到右端点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> l<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;数据范围：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般ACM或者笔试题的时间限制是1秒或2秒。&lt;/p&gt;
&lt;p&gt;在这种情况下，C++代码中的操作次数控制在 $10^7 \sim 10^8$ 为最佳。&lt;/p&gt;
&lt;p&gt;下面给出在不同数据范围下，代码的时间复杂度和算法该如</summary>
      
    
    
    
    <category term="算法" scheme="http://sun-hailong.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法模板" scheme="http://sun-hailong.github.io/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>六级英语写作</title>
    <link href="http://sun-hailong.github.io/2021/11/11/liu-ji-xie-zuo/"/>
    <id>http://sun-hailong.github.io/2021/11/11/liu-ji-xie-zuo/</id>
    <published>2021-11-11T01:17:07.181Z</published>
    <updated>2021-12-18T02:52:49.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首段写作"><a href="#首段写作" class="headerlink" title="首段写作"></a>首段写作</h2><h3 id="开放式作文"><a href="#开放式作文" class="headerlink" title="开放式作文"></a>开放式作文</h3><h4 id="一、社会现象类"><a href="#一、社会现象类" class="headerlink" title="一、社会现象类"></a>一、社会现象类</h4><p>第一句（引出话题）</p><ol><li><p><font face="Consolas" color="Blue">The past several years have witnessed a (common/favorable/undesirable/social/campus…) phenomenon that ___.</font>(<strong>句子</strong>) (同位语从句解释现象内容)</p><p><strong>过去的几年见证了一个常见的/好的/不好的/社会的/校园的/现象</strong></p></li><li><p><font face="Consolas" color="Blue">One of the pressing problems facing/confronting our nation/society today is ___.</font>(<strong>名词 /that 句子</strong>)</p><p><strong>我们国家社会现在面临的紧迫问题之一是___ 。</strong></p></li></ol><p>第二句（数据证明）</p><ol><li><p><font face="Consolas" color="Blue">Taking a look around, one can find numerous examples with ease: </font>+ 句子（<br><font face="Consolas" color="red">individuals are doing sth</font>）（证明现象的普遍）</p><p><strong>环顾四周看一下，一个人就会轻易找到很多例子：（人们正在___）</strong></p></li><li><p><font face="Consolas" color="Blue">According to a recent survey conducted by <strong>CCTV</strong>/ the National Transportation Ministry/China Daily/the National Education Ministry, a high proportion of <font color="Red"> <u><strong>56.6</strong></u></font> percent of people/students/parents/ <font color="Red"><u><strong>acknowledged that they did something.</strong></u></font></font>（从句一定要用<strong>过去式</strong>）</p><p><strong>根据CCTV/交通局/中国日报/教育部所进行的调查显示，高达···%的人承认他们做某事 。</strong></p></li></ol><h4 id="二、对比选择类"><a href="#二、对比选择类" class="headerlink" title="二、对比选择类"></a>二、对比选择类</h4><p>第一句（引出两个选择）</p><ol><li><p><font face="Consolas" color="Blue">Individuals’ opinions about___ (名词) vary from person to person.</font></p><p><strong>人们关于___的看法都不一样。</strong></p></li><li><p><font face="Consolas" color="Blue">Nowadays, instead of <font color="red">doing A</font> an increasing number of sb choose to <font color="red"> do B</font>.</font></p><p><strong>如今，不是做 A， 越来越多人选择做 B 。</strong></p></li></ol><p>第二句（你的选择）</p><ol><li><p><font face="Consolas" color="Blue">As far as I am concerned, I believe ___ (名词) is preferable.</font></p><p><strong>在我看来，我相信 A 更好 。</strong></p></li></ol><h3 id="图画式作文"><a href="#图画式作文" class="headerlink" title="图画式作文"></a>图画式作文</h3><p>第一句（介绍图中人物动作\对话\时间\地点）</p><ol><li><p><font face="Consolas" color="Blue">The cartoon meeting our eyes is quite worrying/interesting and thought-provoking, in which + <font color="red">sb1 be doing sth (and sb2 be doing sth.) + (地点+时间）。</font> </font></p><p><strong>映入我们眼帘的图画非常令人担忧和引人深思，甲正在做什么（乙正在做什么）</strong></p></li><li><p><font face="Consolas" color="Blue">The picture depicts an ironic/interesting situation: <font color="red">sb1 be doing sth (and sb2 be doing sth) + (地点+时间).</font></font></p><p><strong>图片描述了一个讽刺的/有趣的局面：甲正在做某事（乙在做某事 ）。</strong></p></li></ol><p>第二句（点题）</p><ol><li><p><font face="Consolas" color="Blue">This drawing mirrors a common social phenomenon/ a vital theory of philosophy that</font><font color="red">（<u>句子</u>）</font> (图画表达的现象/道理) (<font color="red">题目中找</font>)</p><p><strong>这幅画反应了一个常见的社会现象/一个重要的道理：___ 。</strong></p></li><li><p><font face="Consolas" color="Blue">This picture impresses us and at the same time gives us a serious warning of </font><font color="red">n.（名词）（题目中找）</font></p><p><strong>这幅图画给我们很深印象，同时也给我们一个对于···（<font color="red">负面事情</font>）的严重警告 。</strong></p></li></ol><h3 id="图表式作文"><a href="#图表式作文" class="headerlink" title="图表式作文"></a>图表式作文</h3><p>第一句（各个事物的对比）</p><ol><li><p><font face="Consolas" color="Blue">As is demonstrated in the pie chart/table/bar chart, <font color="red">A</font> ranks first/lowest in <font color="red">sth（图表作文）</font></font>.</p><p><strong>正如饼状图/图表/柱状图显示， <font color="red">A</font> 在 <font color="red">sth</font> 排名第一/最后（图表主题词图中寻）。</strong></p></li><li><p><font face="Consolas" color="Blue"><font color="red">B</font>，<font color="red">C</font>，<font color="red">D</font> and <font color="red">E</font> come next respectively with the number/proportion of <font color="red">数字1</font>，<font color="red"> 数字2</font>，<font color="red">数字3</font>，and <font color="red">数字4</font>.</font><br><strong><font color="red">BCDE</font>，数字/比例分别为<font color="red">数字1</font>， <font color="red">数字2</font>，<font color="red">数字3</font>和<font color="red">数字4</font>。</strong></p></li></ol><p>（事物的变化）（图中有不同时间）</p><ol><li><font face="Consolas" color="Blue">As is demonstrated in the line graph/bar chart/table the past&nbsp;<font color="red">数字</font> years have witnessed a sharp/gradual increase/ decrease of <font color="red">差值</font> in <font color="red">A</font>, (while <font color="red">B</font> and <font color="red">C</font> have increased/decreased respectively by<br><font color="red">差值</font> and <font color="red">差值</font>.)</font><br><strong>正如折线状图/柱状图显示/表格，过去几年见证了A的显著/逐渐的增长/下降了多少（而<font color="red">B</font>和<font color="red">C</font>增长了/下降了多少）。</strong></li></ol><p>第二句</p><ol><li><font face="Consolas" color="Blue">And at the end of <font color="red">时间</font>, the number/the proportion rose to/declined to <font color="red">数字</font> 。</font><br><strong>···时间结束时，该数字/比重上升到/下降到···</strong></li></ol><h3 id="谚语类写作"><a href="#谚语类写作" class="headerlink" title="谚语类写作"></a>谚语类写作</h3><p>第一句（引入名言）</p><ol><li><p><font face="Consolas" color="Blue">There is a widespread/famous/… saying that</font>+ <font color="red">谚语</font> 。</p><p><strong>有个流传广泛/著名的/···/谚语···</strong></p></li><li><p><font face="Consolas" color="Blue">“<font color="red">谚语.</font>”, Such is the remark made by <font color="red">人名</font> , a great scientist/inventor/businessman.</font></p><p><strong>”···”这是某人曾经说过的一句话, (他是) 一个伟大的科学家/发明家/商人</strong></p></li></ol><p>第二句（你对谚语的理解）</p><ol><li><p><font face="Consolas" color="Blue">Simple as the saying is, it informs us of (the significance of + 名词) / (that + 句子)</font></p><p><strong>尽管这个谚语很简单，它告诉了我们</strong></p></li><li><p><font face="Consolas" color="Blue">Obviously what we can make of this remark is (the significance of + 名词) / (that + 句子)</font></p><p><strong>明显的是，我们能从谚语中知道</strong></p></li></ol><h2 id="主旨段写作"><a href="#主旨段写作" class="headerlink" title="主旨段写作"></a>主旨段写作</h2><h3 id="文字连贯"><a href="#文字连贯" class="headerlink" title="文字连贯"></a>文字连贯</h3><ol><li><font face="Consolas" color="Blue">列举 to begin with，next，then，finally.</font></li><li><font face="Consolas" color="Blue">并列 not only…but (also)</font></li><li><font face="Consolas" color="Blue">转折 nevertheless，while</font></li><li><font face="Consolas" color="Blue">因果 since, Hence</font></li><li><font face="Consolas" color="Blue">总结 To sum up，In short</font></li></ol><h3 id="举例论证"><a href="#举例论证" class="headerlink" title="举例论证"></a>举例论证</h3><h4 id="万能例句"><a href="#万能例句" class="headerlink" title="万能例句"></a>万能例句</h4><p><font face="Consolas" color="Blue">A common example, which is frequently cited, is + <font color="red">that句子(主谓)(people in ordinary dress can turn out to be very capable)</font> </font></p><p><strong>一个被普遍引用的例子是</strong>…</p><h4 id="身边案例"><a href="#身边案例" class="headerlink" title="身边案例"></a>身边案例</h4><p><font face="Consolas" color="Blue">An instance occurred recently in which + <font color="red">句子(主谓)(one of my friends made a detailed schedule to arrange his spare time reasonably.)</font></font></p><p><strong>最近发生了一个事情…</strong></p><h4 id="旁征博引"><a href="#旁征博引" class="headerlink" title="旁征博引"></a>旁征博引</h4><p><font face="Consolas" color="Blue">A legend/Gossip/A rumor/Word/A theory/A piece of news/A saying has it that + <font color="red">内容(a woman who bought a malfunctioning luxuries car was intentionally refused to change a new one.)</font></font><br><strong>有传奇/流言蜚语/谣言/消息/理论/新闻/谚语说…</strong></p><h4 id="情景假设"><a href="#情景假设" class="headerlink" title="情景假设"></a>情景假设</h4><p><font face="Consolas" color="Blue">Consider/Imagine/Suppose/Say/Assume sb<font color="red">(a student)</font> who is doing sth<font color="red">(searching for some useful information for his graduation paper)</font>, and he will do sth<font color="red">(be confused by those misleading messages and irrelevant advertisements)</font>.</font></p><p><strong>想象一个人正在…, 他将会…</strong></p><h4 id="名人故事"><a href="#名人故事" class="headerlink" title="名人故事"></a>名人故事</h4><p><font face="Consolas" color="Blue">How could sb(Darwin), a legendary/ famous scientist/ inventor/entrepreneur, <font color="red"><strong>do sth(成就)(come up with<br>the theory of evolution)</strong></font> and win the respect and love of millions of people without A(品质) <font color="red"><strong>(名词)(curiosity/being curious)</strong></font>?</font></p><p><strong>没有A某人如何做到…的并且赢得了大家的爱和尊重呢?</strong></p><h3 id="（1）重要性段（4句）"><a href="#（1）重要性段（4句）" class="headerlink" title="（1）重要性段（4句）"></a>（1）重要性段（4句）</h3><h4 id="主旨句"><a href="#主旨句" class="headerlink" title="主旨句"></a>主旨句</h4><ol start="3"><li><p><font face="Consolas" color="Blue"><strong>A</strong> is so indispensable in people’s life that without it no (名词) can be guaranteed.</font></p><p><strong>A在人们的生活中如此重要,没有它,某事无法被确保 。</strong></p></li></ol><h4 id="第二句："><a href="#第二句：" class="headerlink" title="第二句："></a>第二句：</h4><ol start="2"><li><p><font face="Consolas" color="Blue">Without <strong>A</strong>, a person is unable to do sth, especially in this modern society.</font></p><p><strong>没有A，一个人无法做某事，特别是在现在这个社会里。</strong></p></li></ol><h4 id="第三句："><a href="#第三句：" class="headerlink" title="第三句："></a>第三句：</h4><pre><code> 3. &lt;font face="Consolas" color = Blue&gt;For example... &lt;/font&gt;**举例**</code></pre><h4 id="第四句："><a href="#第四句：" class="headerlink" title="第四句："></a>第四句：</h4><ol start="4"><li><p><font face="Consolas" color="Blue">Therefore, in order to <strong>do sth</strong>, we should lay great emphasis on <strong>A</strong>.</font></p><p><strong>因此，为了做到某事，我们应该重视A</strong></p></li></ol><h3 id="（2）建议段（5句）"><a href="#（2）建议段（5句）" class="headerlink" title="（2）建议段（5句）"></a>（2）建议段（5句）</h3><h4 id="第一句：段主旨"><a href="#第一句：段主旨" class="headerlink" title="第一句：段主旨"></a>第一句：段主旨</h4><ol><li><p><font face="Consolas" color="Blue">Therefore, by some means or other we must come to know how to <font color="red">do sth（题目中找）</font></font></p><p><strong>因此，无论如何，我们都要知道如何做某事 。</strong></p></li></ol><h4 id="第二句：提出建议一"><a href="#第二句：提出建议一" class="headerlink" title="第二句：提出建议一"></a>第二句：提出建议一</h4><ol start="2"><li><p><font face="Consolas" color="Blue">On the one hand, <font color="red">sb</font> be supposed to do <font color="red">one’s</font> utmost to <font color="red">do sth(建议方法一)</font></font></p><p><strong>第一，某人 应该尽最大努力做某事 。</strong></p></li></ol><h4 id="第三句：细节解释建议一的好处"><a href="#第三句：细节解释建议一的好处" class="headerlink" title="第三句：细节解释建议一的好处"></a>第三句：细节解释建议一的好处</h4><ol start="3"><li><p><font face="Consolas" color="Blue">An advantage of this method is that it enables <font color="red">sb to do sth.</font></font></p><p><strong>这个方法的好处是它能使某人做到某事</strong></p></li></ol><h4 id="第四句：提出建议二"><a href="#第四句：提出建议二" class="headerlink" title="第四句：提出建议二"></a>第四句：提出建议二</h4><ol start="4"><li><p><font face="Consolas" color="Blue">On the other hand, it is necessary for <font color="red">sb to do sth.</font></font></p><p><strong>第二，某人有必要做某事。</strong></p></li></ol><h4 id="第五句：总结"><a href="#第五句：总结" class="headerlink" title="第五句：总结"></a>第五句：总结</h4><ol start="5"><li><p><font face="Consolas" color="Blue">Only in this way can we<br><font color="red">do sth(达到的结果）</font></font></p><p><strong>只有这样，我们才能做到某事</strong></p></li></ol><h3 id="（3）分析因果段"><a href="#（3）分析因果段" class="headerlink" title="（3）分析因果段"></a>（3）分析因果段</h3><h4 id="第一句：造成原因很多"><a href="#第一句：造成原因很多" class="headerlink" title="第一句：造成原因很多"></a>第一句：造成原因很多</h4><ol><li><p><font face="Consolas" color="Blue">There may be a combination of factors which contribute to/are responsible for/can explain <font color="red">sth.(原因)</font></font></p><p><strong>也许有多种因素造成/可以解释某事</strong></p></li></ol><h4 id="支持句"><a href="#支持句" class="headerlink" title="支持句"></a>支持句</h4><ol start="2"><li><font face="Consolas" color="Blue">In the first place, In the second place&nbsp;</font><strong>首先，其次</strong></li><li><font face="Consolas" color="Blue">First of all, Secondly, Furthermore&nbsp;</font><strong>首先，其次，另外</strong></li><li><font face="Consolas" color="Blue">For one thing, for another </font><strong>一方面，另一方面</strong></li></ol><h2 id="总结段写作"><a href="#总结段写作" class="headerlink" title="总结段写作"></a>总结段写作</h2><h3 id="总结段1-前面没写建议的文章-3-句"><a href="#总结段1-前面没写建议的文章-3-句" class="headerlink" title="总结段1  (前面没写建议的文章)  (3 句)"></a>总结段1  (前面没写建议的文章)  (3 句)</h3><p><strong><font face="Consolas" color="Blue">采用建议段的1、4、5句</font></strong></p><h3 id="总结段2-前面写了建议的文章-1-句"><a href="#总结段2-前面写了建议的文章-1-句" class="headerlink" title="总结段2  (前面写了建议的文章)  (1 句)"></a>总结段2  (前面写了建议的文章)  (1 句)</h3><p><font face="Consolas" color="Blue">At last from what has been discussed above, we may safely arrive at the conclusion <font color="red">that(句子)</font></font></p><p><strong>最后，从我们讨论的中，我们可以得出一个结论</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;首段写作&quot;&gt;&lt;a href=&quot;#首段写作&quot; class=&quot;headerlink&quot; title=&quot;首段写作&quot;&gt;&lt;/a&gt;首段写作&lt;/h2&gt;&lt;h3 id=&quot;开放式作文&quot;&gt;&lt;a href=&quot;#开放式作文&quot; class=&quot;headerlink&quot; title=&quot;开放式作文&quot;&gt;</summary>
      
    
    
    
    <category term="六级英语" scheme="http://sun-hailong.github.io/categories/%E5%85%AD%E7%BA%A7%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语写作" scheme="http://sun-hailong.github.io/tags/%E8%8B%B1%E8%AF%AD%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>机器学习大作业</title>
    <link href="http://sun-hailong.github.io/2021/11/09/ji-qi-xue-xi-da-zuo-ye/"/>
    <id>http://sun-hailong.github.io/2021/11/09/ji-qi-xue-xi-da-zuo-ye/</id>
    <published>2021-11-09T06:57:38.736Z</published>
    <updated>2021-11-11T01:01:48.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> plt<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 数据读入</span>dataset <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"winequality-red.csv"</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token comment"># 命名采取下划线的规则</span>dataset<span class="token punctuation">.</span>columns <span class="token operator">=</span> dataset<span class="token punctuation">.</span>columns<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">)</span></code></pre><p>首先进行导入相关库的操作</p><p>将数据以分隔符为<code>;</code>的方式读入。同时由于该文件命名规则不符合python的命名规则，所以我调用了函数将空格替换成了下划线<code>_</code></p><p>效果如下：</p><p><img src="https://gitee.com/hailong-sun/pictures/raw/master/iCloud/image-20211109150315575.png"></p><h3 id="查看数据集的信息"><a href="#查看数据集的信息" class="headerlink" title="查看数据集的信息"></a>查看数据集的信息</h3><pre class="language-python" data-language="python"><code class="language-python">dataset<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://gitee.com/hailong-sun/pictures/raw/master/iCloud/image-20211109150459825.png" style="zoom:50%;"><h3 id="判断是否具有缺失值"><a href="#判断是否具有缺失值" class="headerlink" title="判断是否具有缺失值"></a>判断是否具有缺失值</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 查看数据是否存在缺失值</span>dataset<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>根据此操作，可以预测是否需要进行缺失值处理，通过数据分析后，效果并没有让我们失望，无一例缺失值！</p><img src="https://gitee.com/hailong-sun/pictures/raw/master/iCloud/image-20211109162228847.png" style="zoom:50%;"><p>最终由于Quality 类别太细，等级分为0-10，分布太广，故采取二分类的方式：</p><p>将等级分为<strong>两个等级</strong>，劣质(&lt;=5)，优质(&gt;=5)</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 将大于5的设为1，其余设为0</span>dataset<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>dataset<span class="token punctuation">[</span><span class="token string">'quality'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'quality'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>dataset<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>dataset<span class="token punctuation">[</span><span class="token string">'quality'</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'quality'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span></code></pre><h3 id="图像分析"><a href="#图像分析" class="headerlink" title="图像分析"></a>图像分析</h3><p>采取直方图的方式进行分析</p><p><strong>分析发现各类属性的取值范围差别较大，同时分布也不一致，需要进行归一化处理</strong></p><pre class="language-python" data-language="python"><code class="language-python">dataset<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/hailong-sun/pictures/raw/master/iCloud/image-20211109162140129.png"></p><h3 id="数据归一化"><a href="#数据归一化" class="headerlink" title="数据归一化"></a>数据归一化</h3><p>利用公式：$x^*=\frac {x-min}{max-min}$对数据进行归一化处理</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 将数据转成numpy</span>red <span class="token operator">=</span> dataset<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 对数据进行归一化处理</span>mins <span class="token operator">=</span> red<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 返回每一列最小值的列表</span>maxs <span class="token operator">=</span> red<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 返回每一列最大值的列表</span>ranges <span class="token operator">=</span> maxs <span class="token operator">-</span> mins <span class="token comment"># 最大值列表 - 最小值列表 = 差值列表</span>norm_red <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>red<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 用于存储归一化后的数据</span>row <span class="token operator">=</span> red<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 数据集的行数</span>norm_red <span class="token operator">=</span> red <span class="token operator">-</span> np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>mins<span class="token punctuation">,</span> <span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 矩阵每一列数据都减去每一列的最小值</span>norm_red <span class="token operator">=</span> norm_red <span class="token operator">/</span> np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>ranges<span class="token punctuation">,</span> <span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 最终归一化得到的数据</span></code></pre><h2 id="算法的训练与评价"><a href="#算法的训练与评价" class="headerlink" title="算法的训练与评价"></a>算法的训练与评价</h2><h3 id="1-采用神经网络算法"><a href="#1-采用神经网络算法" class="headerlink" title="1. 采用神经网络算法"></a>1. 采用神经网络算法</h3><pre class="language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> norm_red<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 取前面10列</span>y <span class="token operator">=</span> norm_red<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">]</span> <span class="token comment"># 取最后一列quality</span><span class="token comment"># 使用神经网络算法</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neural_network <span class="token keyword">import</span> MLPClassifierx_train<span class="token punctuation">,</span>x_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.20</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># random_state的设置是为了保证每次结果相同</span>mlp_model <span class="token operator">=</span> MLPClassifier<span class="token punctuation">(</span>hidden_layer_sizes<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_iter<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'tanh'</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>mlp_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span> <span class="token comment"># 训练</span>accuracy <span class="token operator">=</span> mlp_model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token comment"># 正确率</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'神经网络模型的预测准确率是：'</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">)</span></code></pre><p>算法流程：</p><p>首先取出前十列作为x，最后一列quality作为y</p><p>然后通过<code>train_test_split</code>函数进行训练集与测试集的划分，random_state的设置是为了保证每次结果相同</p><p>通过设置两层隐藏层，大小为128</p><p>得到神经网络模型的最终<strong>预测准确率</strong>为0.784375</p><h3 id="2-采用SVM算法"><a href="#2-采用SVM算法" class="headerlink" title="2. 采用SVM算法"></a>2. 采用SVM算法</h3><pre class="language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> norm_red<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 取前面10列</span>y <span class="token operator">=</span> norm_red<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">]</span> <span class="token comment"># 取最后一列quality</span><span class="token comment"># 使用SVM算法</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVCx_train<span class="token punctuation">,</span>x_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.20</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>mlp_model <span class="token operator">=</span> SVC<span class="token punctuation">(</span>C<span class="token operator">=</span><span class="token number">1e4</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">,</span> kernel<span class="token operator">=</span><span class="token string">'rbf'</span><span class="token punctuation">)</span>mlp_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span> <span class="token comment"># 训练</span>accuracy <span class="token operator">=</span> mlp_model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token comment"># 正确率</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'SVM的预测准确率是：'</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">)</span></code></pre><p><strong>1. 简介：</strong></p><p>SVM（支持向量机）主要用于分类问题，主要的应用场景有字符识别、面部识别、行人检测、文本分类等领域。</p><p>通常SVM用于二元分类问题，对于多元分类通常将其分解为多个二元分类问题，再进行分类。</p><p><strong>2. 算法流程：</strong></p><p>首先取出前十列作为x，最后一列quality作为y</p><p>然后通过<code>train_test_split</code>函数进行训练集与测试集的划分，random_state的设置是为了保证每次结果相同</p><p>设置迭代回合数为10000，gamma参数为<code>auto</code></p><p>同时设定核函数为<strong>高斯核函数</strong>，其形式为：$K(x,z)=exp(\frac {-\parallel x-z\parallel^2 }{2\sigma^2} )$</p><p>得到SVM模型的最终<strong>预测准确率</strong>为0.79375</p><h3 id="3-采用KNN算法"><a href="#3-采用KNN算法" class="headerlink" title="3. 采用KNN算法"></a>3. 采用KNN算法</h3><pre class="language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> norm_red<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 取前面10列</span>y <span class="token operator">=</span> norm_red<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">]</span> <span class="token comment"># 取最后一列quality</span><span class="token comment"># 使用KNN算法</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifierx_train<span class="token punctuation">,</span>x_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.20</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>mlp_model <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>mlp_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span> <span class="token comment"># 训练</span>accuracy <span class="token operator">=</span> mlp_model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token comment"># 正确率</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'KNN的预测准确率是：'</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">)</span></code></pre><p><strong>1. 简介：</strong></p><p>KNN是一种<strong>非参的</strong>，<strong>惰性</strong>的算法模型。什么是非参，什么是惰性呢？</p><p><strong>非参</strong>的意思并不是说这个算法不需要参数，而是意味着这个模型不会对数据做出任何的假设，与之相对的是线性回归（我们总会假设线性回归是一条直线）。也就是说KNN建立的模型结构是根据数据来决定的，这也比较符合现实的情况，毕竟在现实中的情况往往与理论上的假设是不相符的。</p><p><strong>惰性</strong>又是什么意思呢？想想看，同样是分类算法，逻辑回归需要先对数据进行大量训练（tranning），最后才会得到一个算法模型。而KNN算法却不需要，它没有明确的训练数据的过程，或者说这个过程很快。</p><p><strong>2. 算法流程：</strong></p><p>首先取出前十列作为x，最后一列quality作为y</p><p>然后通过<code>train_test_split</code>函数进行训练集与测试集的划分，random_state的设置是为了保证每次结果相同</p><p>通过不断调参发现设置n的值为4时效果最佳。</p><p>得到KNN模型的最终<strong>预测准确率</strong>为0.75625</p><h3 id="4-采用logistic回归方法"><a href="#4-采用logistic回归方法" class="headerlink" title="4.采用logistic回归方法"></a>4.采用logistic回归方法</h3><pre class="language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> norm_red<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 取前面10列</span>y <span class="token operator">=</span> norm_red<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">]</span> <span class="token comment"># 取最后一列quality</span><span class="token comment"># 使用logistic算法</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegressionx_train<span class="token punctuation">,</span>x_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.20</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>mlp_model <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>C<span class="token operator">=</span><span class="token number">1e3</span><span class="token punctuation">,</span> solver<span class="token operator">=</span><span class="token string">'liblinear'</span><span class="token punctuation">,</span> multi_class<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">)</span>mlp_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span> <span class="token comment"># 训练</span>accuracy <span class="token operator">=</span> mlp_model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token comment"># 正确率</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'逻辑回归的预测准确率是：'</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">)</span></code></pre><p>得到logistic模型的最终<strong>预测准确率</strong>为0.78125</p><p>综上所述，四种模型的预测准确率如下：</p><p>神经网络模型：0.784375</p><p>SVM模型：0.79375</p><p>KNN模型：0.75625</p><p>logistic模型：0.78125</p><p>发现在这个问题中，SVM算法训练出来的模型效果最佳</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据预处理&quot;&gt;&lt;a href=&quot;#数据预处理&quot; class=&quot;headerlink&quot; title=&quot;数据预处理&quot;&gt;&lt;/a&gt;数据预处理&lt;/h2&gt;&lt;pre class=&quot;language-python&quot; data-language=&quot;python&quot;&gt;&lt;code cla</summary>
      
    
    
    
    <category term="机器学习" scheme="http://sun-hailong.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ML" scheme="http://sun-hailong.github.io/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>Gitee密钥SSH出错</title>
    <link href="http://sun-hailong.github.io/2021/10/29/gitee-ssh-cuo-wu/"/>
    <id>http://sun-hailong.github.io/2021/10/29/gitee-ssh-cuo-wu/</id>
    <published>2021-10-29T04:50:04.557Z</published>
    <updated>2021-10-29T05:21:12.730Z</updated>
    
    <content type="html"><![CDATA[<p>最近笔者想更新博客的时候，使用hexo三连始终无法上传，然后发现是SSH与Gitee没连上</p><p><img src="https://gitee.com/hailong-sun/pictures/raw/master/iCloud/image-20211029125356539.png"></p><p>使用了百度的各种方法以后，尝试了删除原先的密钥，重新添加SSH，一顿操作后仍然无效，然后我就发现了github是可以正常连接上，而gitee无法连接上。</p><p><img src="https://gitee.com/hailong-sun/pictures/raw/master/iCloud/image-20211029131234179.png"></p><p><img src="https://gitee.com/hailong-sun/pictures/raw/master/iCloud/image-20211029125548204.png"></p><p>关于如何判断SSH是否连接上的方法如下：</p><pre class="language-html" data-language="html"><code class="language-html">ssh -T git@github.comssh -T git@gitee.com</code></pre><hr><p>然后我就尝试打印错误信息：</p><pre class="language-html" data-language="html"><code class="language-html">ssh -T -v git@gitee.com</code></pre><p>由于我本地当时没有截图这个部分，所有这个地方就使用了知乎原帖的图片</p><p><img src="https://gitee.com/hailong-sun/pictures/raw/master/iCloud/image-20211029125933941.png">  </p><p>根据知乎大神的回答，才发现是<strong>SSH算法出错</strong>， 将 rsa改为ed25519 就解决了。</p><p>（这个错误真的莫名其妙！！！！<strong>疯狂diss</strong>Gitee平台！！！！）</p><ol><li><p>重新生成密钥</p><pre class="language-html" data-language="html"><code class="language-html">ssh-keygen -t ed25519 -C"XXX@XXX.com"</code></pre><p>输入以上命令以后，连续三次回车即可</p><p><img src="https://gitee.com/hailong-sun/pictures/raw/master/iCloud/image-20211029130155982.png"></p></li><li><p>用记事本打开 C:\Users\电脑用户名\ .ssh\id_ed25519.pub</p><p>将里面内容全选并复制</p></li><li><p>打开Gitee—&gt;点击设置—&gt;选择SSH公钥—&gt;添加公钥，将上述复制的内容添加即可</p></li><li><p>大功告成</p></li></ol><p><img src="https://gitee.com/hailong-sun/pictures/raw/master/iCloud/image-20211029130609909.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近笔者想更新博客的时候，使用hexo三连始终无法上传，然后发现是SSH与Gitee没连上&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/hailong-sun/pictures/raw/master/iCloud/image-20211029125</summary>
      
    
    
    
    <category term="Problems" scheme="http://sun-hailong.github.io/categories/Problems/"/>
    
    
    <category term="SSH" scheme="http://sun-hailong.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Linux-常用文件管理命令</title>
    <link href="http://sun-hailong.github.io/2021/10/27/linux-chang-yong-wen-jian-guan-li-ming-ling/"/>
    <id>http://sun-hailong.github.io/2021/10/27/linux-chang-yong-wen-jian-guan-li-ming-ling/</id>
    <published>2021-10-27T11:56:25.990Z</published>
    <updated>2022-01-27T04:08:21.137Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于此次学习目的是<strong>实用</strong>，并不会涉及很多<del><strong>八股文</strong></del>概念，主要注重平时用得较多的操作</p><h2 id="常用文件管理命令"><a href="#常用文件管理命令" class="headerlink" title="常用文件管理命令"></a>常用文件管理命令</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> ctrl c: 取消命令，并且换行<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> ctrl u: 清空本行命令<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> tab键：可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> ls: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> pwd: 显示当前路径<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token builtin class-name">cd</span> XXX: 进入XXX目录下, <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span> 返回上层目录<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token function">cp</span> XXX YYY: 将XXX文件复制成YYY，XXX和YYY可以是一个路径，比如<span class="token punctuation">..</span>/dir_c/a.txt，表示上层目录下的dir_c文件夹下的文件a.txt<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token function">mkdir</span> XXX: 创建目录XXX<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token function">rm</span> XXX: 删除普通文件<span class="token punctuation">;</span>  <span class="token function">rm</span> XXX -r: 删除文件夹<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token function">mv</span> XXX YYY: 将XXX文件移动到YYY，和cp命令一样，XXX和YYY可以是一个路径；重命名也是用这个命令<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token function">touch</span> XXX: 创建一个文件<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token function">cat</span> XXX: 展示文件XXX中的内容<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> 复制文本    windows/Linux下：Ctrl + insert，Mac下：command + c<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> 粘贴文本    windows/Linux下：Shift + insert，Mac下：command + <span class="token function">v</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;鉴于此次学习目的是&lt;strong&gt;实用&lt;/strong&gt;，并不会涉及很多&lt;del&gt;&lt;strong&gt;八股文&lt;/strong&gt;&lt;/del&gt;概念，主要注重平时用得较多的操作&lt;/p&gt;
&lt;h2 id=&quot;常用文件管理命令&quot;&gt;&lt;a href=&quot;#常用文件管理命令&quot; class=&quot;head</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://sun-hailong.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="http://sun-hailong.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>德约痛失年度大满贯</title>
    <link href="http://sun-hailong.github.io/2021/09/13/de-yue-cuo-shi-nian-du-quan-man-guan/"/>
    <id>http://sun-hailong.github.io/2021/09/13/de-yue-cuo-shi-nian-du-quan-man-guan/</id>
    <published>2021-09-13T02:55:03.305Z</published>
    <updated>2021-10-19T11:55:57.345Z</updated>
    
    <content type="html"><![CDATA[<p>​    往往最接近成功就最恐惧失败。</p><p>​    昨天晚上一点钟还在纠结是等着四点钟的比赛，还是先睡一觉再定个闹钟起来看，但是我自己也明白，这几天的数学建模比赛几乎没怎么睡觉，一觉下去可能醒来就九点了，事实证明确实如此…<br>​<br>​    从今年澳网夺冠，到法网击败纳达尔，再到拿下温网，每一场大满贯决赛我都捏着一把汗，但是每一次你都能给我带来惊喜。前段时间奥运会止步四强让我久久不能释怀，因为不敢保证3年以后的巴黎奥运会是否还能顶得住年轻球员的冲击力。<br>​<br>​    今天早上六点钟多突然惊醒，一看手机点开直播，就直接是颁奖仪式了，看着总理脸上那灿烂的笑容，我就知道事情不对劲了，然后点开微博一看，三个4:6输了。今天的比赛我还没仔细看，不知道发挥如何，但是也恭喜总理，能战胜德约确实不容易。总理赛后采访说：“我还从未告诉任何人，但是现在要说出来，你就是史上最伟大球员！”<br>​<br>​    我德也是人，不是神，是人都会有不稳定的时候，这也是网球这项运动的魅力，如果一件事情已是板上钉钉，即使能成功，那也少了几分为此拼搏的兴奋和激动！<br>​<br>​    人生可能就是不能太完美了，留点遗憾，许多年后回忆起来也是种别样的美。接下来希望能健康的打下去，至于年度全满贯，一切听天由命，是你的终将还会是你的！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    往往最接近成功就最恐惧失败。&lt;/p&gt;
&lt;p&gt;​    昨天晚上一点钟还在纠结是等着四点钟的比赛，还是先睡一觉再定个闹钟起来看，但是我自己也明白，这几天的数学建模比赛几乎没怎么睡觉，一觉下去可能醒来就九点了，事实证明确实如此…&lt;br&gt;​&lt;br&gt;​    从今年澳网夺</summary>
      
    
    
    
    <category term="生活" scheme="http://sun-hailong.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="Tennis" scheme="http://sun-hailong.github.io/tags/Tennis/"/>
    
  </entry>
  
  <entry>
    <title>Markdown学习笔记</title>
    <link href="http://sun-hailong.github.io/2021/08/30/markdown-xue-xi-bi-ji/"/>
    <id>http://sun-hailong.github.io/2021/08/30/markdown-xue-xi-bi-ji/</id>
    <published>2021-08-30T04:59:27.874Z</published>
    <updated>2021-11-11T01:01:27.840Z</updated>
    
    <content type="html"><![CDATA[<p>ps: 添加目录是<code>[toc]</code>指令</p><h2 id="关于标题"><a href="#关于标题" class="headerlink" title="关于标题"></a>关于标题</h2><p>使用<code>#</code>可表示1~6级标题</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span><span class="token title important"><span class="token punctuation">##</span> 二级标题</span><span class="token title important"><span class="token punctuation">###</span> 三级标题</span><span class="token title important"><span class="token punctuation">####</span> 四级标题</span><span class="token title important"><span class="token punctuation">#####</span> 五级标题</span><span class="token title important"><span class="token punctuation">######</span> 六级标题</span></code></pre><h2 id="关于段落格式"><a href="#关于段落格式" class="headerlink" title="关于段落格式"></a>关于段落格式</h2><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>段落的换行是使用两个以上空格加上回车</p><p>也可以用空行来表示（不常用）</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体文本</span><span class="token punctuation">*</span></span><span class="token italic"><span class="token punctuation">_</span><span class="token content">斜体文本</span><span class="token punctuation">_</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">粗体文本</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content">粗体文本</span><span class="token punctuation">__</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">粗斜体文本</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content"><span class="token italic"><span class="token punctuation">_</span><span class="token content">粗斜体文本</span><span class="token punctuation">_</span></span></span><span class="token punctuation">__</span></span></code></pre><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token hr punctuation">***</span><span class="token hr punctuation">* * *</span><span class="token hr punctuation">*****</span><span class="token title important">- - -<span class="token punctuation">---------</span></span></code></pre><p><strong>效果如下：</strong></p><hr><hr><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可，实例如下：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token operator">~</span><span class="token operator">~</span>程序员都会秃头<span class="token operator">~</span><span class="token operator">~</span></code></pre><p><strong>效果如下：</strong></p><p><del>程序员都会秃头</del></p><h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4><p>下划线可以通过 HTML 的 <strong><code>&lt;u&gt;</code></strong> 标签来实现：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">&gt;</span></span>划重点！女朋友真好看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">&gt;</span></span></code></pre><p><u>划重点！女朋友真好看</u></p><h2 id="关于列表"><a href="#关于列表" class="headerlink" title="关于列表"></a>关于列表</h2><h3 id="有序列表和无序列表"><a href="#有序列表和无序列表" class="headerlink" title="有序列表和无序列表"></a>有序列表和无序列表</h3><p>无序列表使用星号(<strong><code>*</code></strong>)、加号(<strong><code>+</code></strong>)或是减号(<strong><code>-</code></strong>)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 第一项<span class="token list punctuation">+</span> 第二项<span class="token list punctuation">-</span> 第三项</code></pre><p><strong>效果如下：</strong></p><ul><li>第一项</li></ul><ul><li>第二型</li></ul><ul><li>第三项</li></ul><p>有序列表使用数字并加上<code>.</code> 号来表示，如：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 第一项<span class="token list punctuation">2.</span> 第二项<span class="token list punctuation">3.</span> 第三项</code></pre><p><strong>效果如下：</strong></p><ol><li><p>第一项</p></li><li><p>第二项</p></li><li><p>第三项</p></li></ol><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 第一项：    <span class="token list punctuation">-</span> 第一项嵌套的第一个元素    <span class="token list punctuation">-</span> 第一项嵌套的第二个元素<span class="token list punctuation">2.</span> 第二项：    <span class="token list punctuation">-</span> 第二项嵌套的第一个元素    <span class="token list punctuation">-</span> 第二项嵌套的第二个元素</code></pre><p><strong>效果如下：</strong></p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h2 id="关于区块"><a href="#关于区块" class="headerlink" title="关于区块"></a>关于区块</h2><p>Markdown 区块引用是在段落开头使用 <strong><code>&gt;</code></strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;</span> 连<span class="token blockquote punctuation">&gt;</span> 起<span class="token blockquote punctuation">&gt;</span> 来</code></pre><p><strong>效果如下：</strong></p><blockquote><p>连<br>起<br>来</p></blockquote><p>当然，区块也是可以嵌套的~</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;</span>连<span class="token blockquote punctuation">&gt;&gt;</span>不<span class="token blockquote punctuation">&gt;&gt;&gt;</span>起<span class="token blockquote punctuation">&gt;&gt;&gt;&gt;</span>来</code></pre><p><strong>效果如下：</strong></p><blockquote><p>连</p><blockquote><p>不</p><blockquote><p>起</p></blockquote></blockquote><blockquote><blockquote><blockquote><p>来  </p></blockquote></blockquote></blockquote></blockquote><h3 id="区块与列表的嵌套使用"><a href="#区块与列表的嵌套使用" class="headerlink" title="区块与列表的嵌套使用"></a>区块与列表的嵌套使用</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;</span> 区块中使用列表<span class="token blockquote punctuation">&gt;</span> <span class="token list punctuation">1.</span> hey<span class="token blockquote punctuation">&gt;</span> <span class="token list punctuation">+</span> man</code></pre><p><strong>效果如下：</strong></p><blockquote><p>区块中使用列表</p><ol><li>hey</li></ol><ul><li>man</li></ul></blockquote><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 第一项    &gt; hey    &gt; man<span class="token list punctuation">*</span> 第二项</code></pre><p><strong>效果如下：</strong></p><ul><li>第一项<blockquote><p>hey<br>man</p></blockquote></li><li>第二项</li></ul><h2 id="关于代码"><a href="#关于代码" class="headerlink" title="关于代码"></a>关于代码</h2><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**`**），例如：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token code-snippet code keyword">`printf()`</span>函数</code></pre><p><strong>效果如下：</strong></p><p><code>printf()</code>函数</p><p>你也可以用<code>```</code><strong>包裹一段代码</strong>，并指定一种语言（也可以不指定）</p><h2 id="关于链接"><a href="#关于链接" class="headerlink" title="关于链接"></a>关于链接</h2><p>链接使用方法如下：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">链接名称</span>](<span class="token url">链接地址</span>)</span>或者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>链接地址</span><span class="token punctuation">&gt;</span></span></code></pre><p>例如：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">欢迎使用<span class="token url">[<span class="token content">Google</span>](<span class="token url">https://www.google.com</span>)</span>搜索</code></pre><p>欢迎使用<a href="https://www.google.com/">Google</a>搜索</p><h3 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h3><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">这个链接使用1作为网址变量<span class="token url">[<span class="token content">Google</span>][<span class="token variable">1</span>]</span></code></pre><p>这个链接使用1作为网址变量<a href="http://www.google.com/">Google</a></p><h2 id="关于图片"><a href="#关于图片" class="headerlink" title="关于图片"></a>关于图片</h2><p>Markdown 图片语法格式如下：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">alt 属性文本</span>](<span class="token url">图片地址</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">alt 属性文本</span>](<span class="token url">图片地址</span> <span class="token string">"可选标题"</span>)</span></code></pre><ul><li>开头一个感叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li></ul><p><strong>实例：</strong></p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">RUNOOB 图标</span>](<span class="token url">http://static.runoob.com/images/runoob-logo.png</span>)</span></code></pre><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><h2 id="关于表格"><a href="#关于表格" class="headerlink" title="关于表格"></a>关于表格</h2><p>Markdown 制作表格使用 <strong><code>|</code></strong> 来分隔不同的单元格，使用 <strong><code>-</code></strong> 来分隔表头和其他行。</p><p>语法格式如下：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important">  表头   </span><span class="token punctuation">|</span><span class="token table-header important"> 表头  </span><span class="token punctuation">|</span></span><span class="token table-line"><span class="token punctuation">|</span>  <span class="token punctuation">----</span>  <span class="token punctuation">|</span> <span class="token punctuation">----</span>  <span class="token punctuation">|</span></span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> 单元格  </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data"> 单元格  </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span></span></span></code></pre><p><strong>效果如下：</strong></p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h3 id="表格的对齐方式"><a href="#表格的对齐方式" class="headerlink" title="表格的对齐方式"></a>表格的对齐方式</h3><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important"> 左对齐 </span><span class="token punctuation">|</span><span class="token table-header important"> 右对齐 </span><span class="token punctuation">|</span><span class="token table-header important"> 居中对齐 </span><span class="token punctuation">|</span></span><span class="token table-line"><span class="token punctuation">|</span> <span class="token punctuation">:-----</span><span class="token punctuation">|</span> <span class="token punctuation">----:</span> <span class="token punctuation">|</span> <span class="token punctuation">:----:</span> <span class="token punctuation">|</span></span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span></span></span></code></pre><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>当你需要在编辑器中插入数学公式时，用<code> $$ </code>包裹TeX 或 LaTeX 格式的数学公式来实现。</p><p>具体使用时自行百度LaTeX语法。</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">$$ f(x)=x^2+2x+1 $$</code></pre><p>$$f(x)=x^2 + 2x$$</p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>Markdown可以画很多流程图，具体使用时自行百度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ps: 添加目录是&lt;code&gt;[toc]&lt;/code&gt;指令&lt;/p&gt;
&lt;h2 id=&quot;关于标题&quot;&gt;&lt;a href=&quot;#关于标题&quot; class=&quot;headerlink&quot; title=&quot;关于标题&quot;&gt;&lt;/a&gt;关于标题&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;#&lt;/code&gt;可表示1~6级标题</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://sun-hailong.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Markdown" scheme="http://sun-hailong.github.io/tags/Markdown/"/>
    
  </entry>
  
</feed>
